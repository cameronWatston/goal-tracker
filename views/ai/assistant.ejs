<!-- AI Assistant Page -->
<div class="container py-5">
    <h1 class="mb-4">AI Goal Assistant</h1>
    <p class="lead mb-5">Leverage the power of AI to enhance your goal achievement journey</p>

    <div class="row mb-5">
        <div class="col-md-6">
            <div class="card shadow-sm mb-4">
                <div class="card-body">
                    <h3 class="card-title">Create SMART Goals</h3>
                    <p class="card-text">Get AI assistance to transform your ideas into well-defined SMART goals.</p>
                    
                    <form id="smart-goal-form">
                        <div class="mb-3">
                            <label for="goalInput" class="form-label">Describe your goal idea</label>
                            <textarea class="form-control" id="goalInput" rows="3" placeholder="e.g., I want to get fit"></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary">Generate SMART Goal</button>
                    </form>
                    
                    <div id="smart-goal-result" class="mt-4 d-none">
                        <div class="alert alert-success">
                            <h4 id="goal-title" class="alert-heading"></h4>
                            <p id="goal-description"></p>
                            <hr>
                            <p class="mb-0"><strong>Metrics:</strong> <span id="goal-metrics"></span></p>
                            <p class="mb-0"><strong>Timeframe:</strong> <span id="goal-timeframe"></span></p>
                            <p class="mb-0"><strong>Tips:</strong> <span id="goal-tips"></span></p>
                            <div class="mt-3">
                                <button id="save-smart-goal" class="btn btn-sm btn-success">Save as Goal</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card shadow-sm mb-4">
                <div class="card-body">
                    <h3 class="card-title">Action Plan Generator</h3>
                    <p class="card-text">Break down your goals into actionable steps with AI assistance.</p>
                    
                    <form id="action-plan-form">
                        <div class="mb-3">
                            <label for="goalSelect" class="form-label">Select a goal</label>
                            <select class="form-select" id="goalSelect">
                                <option selected disabled>Choose a goal...</option>
                                <!-- Goals will be loaded here dynamically -->
                            </select>
                        </div>
                        <button type="submit" class="btn btn-primary">Generate Action Plan</button>
                    </form>
                    
                    <div id="action-plan-result" class="mt-4 d-none">
                        <div class="alert alert-info">
                            <h4 class="alert-heading">Your Action Plan</h4>
                            <div id="action-steps"></div>
                            <hr>
                            <h5>Resources Needed:</h5>
                            <ul id="action-resources"></ul>
                            <h5>Potential Obstacles:</h5>
                            <div id="action-obstacles"></div>
                            <h5>First Milestone:</h5>
                            <p id="action-milestone"></p>
                            <div class="mt-3">
                                <button id="save-action-plan" class="btn btn-sm btn-info">Save Plan</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-5">
        <div class="col-md-6">
            <div class="card shadow-sm mb-4">
                <div class="card-body">
                    <h3 class="card-title">Motivational Nudges</h3>
                    <p class="card-text">Get personalized encouragement and coaching for your goals.</p>
                    
                    <form id="motivation-form">
                        <div class="mb-3">
                            <label for="motivationGoalSelect" class="form-label">Select a goal</label>
                            <select class="form-select" id="motivationGoalSelect">
                                <option selected disabled>Choose a goal...</option>
                                <!-- Goals will be loaded here dynamically -->
                            </select>
                        </div>
                        <button type="submit" class="btn btn-primary">Get Motivation</button>
                    </form>
                    
                    <div id="motivation-result" class="mt-4 d-none">
                        <div class="alert alert-warning">
                            <p id="motivation-message"></p>
                            <hr>
                            <p class="mb-0"><strong>Suggested Action:</strong> <span id="motivation-action"></span></p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card shadow-sm mb-4">
                <div class="card-body">
                    <h3 class="card-title">Goal Completion Forecast</h3>
                    <p class="card-text">Predict your likelihood of success and get recommendations.</p>
                    
                    <form id="forecast-form">
                        <div class="mb-3">
                            <label for="forecastGoalSelect" class="form-label">Select a goal</label>
                            <select class="form-select" id="forecastGoalSelect">
                                <option selected disabled>Choose a goal...</option>
                                <!-- Goals will be loaded here dynamically -->
                            </select>
                        </div>
                        <button type="submit" class="btn btn-primary">Generate Forecast</button>
                    </form>
                    
                    <div id="forecast-result" class="mt-4 d-none">
                        <div class="alert alert-primary">
                            <h4 class="alert-heading">Goal Completion Forecast</h4>
                            <div class="progress mb-3">
                                <div id="forecast-likelihood" class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
                            </div>
                            <h5>Key Factors:</h5>
                            <ul id="forecast-factors"></ul>
                            <h5>Recommendations:</h5>
                            <ul id="forecast-recommendations"></ul>
                            <p><strong>Estimated Completion:</strong> <span id="forecast-date"></span></p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="card shadow-sm mb-4">
                <div class="card-body">
                    <h3 class="card-title">Progress Insights</h3>
                    <p class="card-text">Get AI-powered analytics on your goal progress patterns.</p>
                    
                    <form id="insights-form">
                        <div class="mb-3">
                            <label for="insightsGoalSelect" class="form-label">Select a goal</label>
                            <select class="form-select" id="insightsGoalSelect">
                                <option selected disabled>Choose a goal...</option>
                                <!-- Goals will be loaded here dynamically -->
                            </select>
                        </div>
                        <button type="submit" class="btn btn-primary">Generate Insights</button>
                    </form>
                    
                    <div id="insights-result" class="mt-4 d-none">
                        <div class="alert alert-secondary">
                            <h4 class="alert-heading">Progress Insights</h4>
                            <p id="insights-summary"></p>
                            <h5>Key Metrics:</h5>
                            <div id="insights-metrics"></div>
                            <h5>Patterns Detected:</h5>
                            <ul id="insights-patterns"></ul>
                            <h5>Actionable Insights:</h5>
                            <ul id="insights-actions"></ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card shadow-sm mb-4">
                <div class="card-body">
                    <h3 class="card-title">Natural Language Logging</h3>
                    <p class="card-text">Update your goal progress using natural language.</p>
                    
                    <form id="nl-update-form">
                        <div class="mb-3">
                            <label for="nlGoalSelect" class="form-label">Select a goal</label>
                            <select class="form-select" id="nlGoalSelect">
                                <option selected disabled>Choose a goal...</option>
                                <!-- Goals will be loaded here dynamically -->
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="nlUpdate" class="form-label">Describe your progress</label>
                            <textarea class="form-control" id="nlUpdate" rows="3" placeholder="e.g., I went for a 30-minute run yesterday morning and felt great!"></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary">Process Update</button>
                    </form>
                    
                    <div id="nl-result" class="mt-4 d-none">
                        <div class="alert alert-success">
                            <h4 class="alert-heading">Processed Update</h4>
                            <p><strong>Progress Made:</strong> <span id="nl-progress"></span></p>
                            <p><strong>When:</strong> <span id="nl-time"></span></p>
                            <p><strong>Challenges:</strong> <span id="nl-challenges"></span></p>
                            <p><strong>Sentiment:</strong> <span id="nl-sentiment"></span></p>
                            <div class="mt-3">
                                <button id="save-nl-update" class="btn btn-sm btn-success">Save Update</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Load user goals into all select elements
        loadUserGoals();
        
        // SMART Goal form submission
        document.getElementById('smart-goal-form').addEventListener('submit', function(e) {
            e.preventDefault();
            const userInput = document.getElementById('goalInput').value;
            if (!userInput) {
                alert('Please describe your goal');
                return;
            }
            
            // Show loading indicator
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Generating...';
            
            // Call the AI service
            fetch('/api/ai/smart-goal', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ userInput }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.success && data.data) {
                    // Display the result
                    const result = typeof data.data === 'string' ? JSON.parse(data.data) : data.data;
                    
                    document.getElementById('goal-title').textContent = result.title;
                    document.getElementById('goal-description').textContent = result.description;
                    document.getElementById('goal-metrics').textContent = result.metrics;
                    document.getElementById('goal-timeframe').textContent = result.timeframe;
                    document.getElementById('goal-tips').textContent = result.tips;
                    
                    document.getElementById('smart-goal-result').classList.remove('d-none');
                    
                    // Store the result for saving
                    document.getElementById('save-smart-goal').dataset.goal = JSON.stringify(result);
                } else {
                    alert('Error generating SMART goal: ' + (data.error || 'Unknown error'));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error generating SMART goal. Please try again.');
            })
            .finally(() => {
                // Reset button
                submitBtn.disabled = false;
                submitBtn.textContent = originalText;
            });
        });
        
        // Save SMART Goal button
        document.getElementById('save-smart-goal').addEventListener('click', function() {
            const goalData = JSON.parse(this.dataset.goal);
            
            fetch('/api/goals/create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    title: goalData.title,
                    description: goalData.description,
                    target_date: '', // Can be enhanced to parse from timeframe
                    category: 'general'
                }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Goal saved successfully!');
                    document.getElementById('smart-goal-form').reset();
                    document.getElementById('smart-goal-result').classList.add('d-none');
                    loadUserGoals(); // Reload goals in selects
                } else {
                    alert('Error saving goal: ' + (data.error || 'Unknown error'));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error saving goal. Please try again.');
            });
        });
        
        // Action Plan form submission
        document.getElementById('action-plan-form').addEventListener('submit', function(e) {
            e.preventDefault();
            const goalId = document.getElementById('goalSelect').value;
            if (!goalId || goalId === 'Choose a goal...') {
                alert('Please select a goal');
                return;
            }
            
            // Show loading
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Generating...';
            
            // Call the AI service
            fetch('/api/ai/action-plan', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ goalId }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.success && data.data) {
                    // Display the result
                    const result = typeof data.data === 'string' ? JSON.parse(data.data) : data.data;
                    
                    // Render steps
                    const stepsEl = document.getElementById('action-steps');
                    stepsEl.innerHTML = '';
                    result.steps.forEach((step, index) => {
                        stepsEl.innerHTML += `
                            <div class="mb-2">
                                <strong>${index + 1}. ${step.name}</strong>
                                <p>${step.description}</p>
                                <small class="text-muted">Time estimate: ${step.timeEstimate}</small>
                            </div>
                        `;
                    });
                    
                    // Render resources
                    const resourcesEl = document.getElementById('action-resources');
                    resourcesEl.innerHTML = '';
                    result.resources.forEach(resource => {
                        resourcesEl.innerHTML += `<li>${resource}</li>`;
                    });
                    
                    // Render obstacles
                    const obstaclesEl = document.getElementById('action-obstacles');
                    obstaclesEl.innerHTML = '';
                    result.obstacles.forEach(obstacle => {
                        obstaclesEl.innerHTML += `
                            <div class="mb-2">
                                <strong>Obstacle:</strong> ${obstacle.obstacle}
                                <br>
                                <strong>Solution:</strong> ${obstacle.solution}
                            </div>
                        `;
                    });
                    
                    // Render milestone
                    document.getElementById('action-milestone').textContent = result.firstMilestone;
                    
                    document.getElementById('action-plan-result').classList.remove('d-none');
                    
                    // Store the result for saving
                    document.getElementById('save-action-plan').dataset.plan = JSON.stringify(result);
                    document.getElementById('save-action-plan').dataset.goalId = goalId;
                } else {
                    alert('Error generating action plan: ' + (data.error || 'Unknown error'));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error generating action plan. Please try again.');
            })
            .finally(() => {
                // Reset button
                submitBtn.disabled = false;
                submitBtn.textContent = originalText;
            });
        });
        
        // Add event listeners for other AI features (similar pattern)
        // Motivation, Forecast, Insights, Natural Language forms
        
        // Helper function to load user goals into select elements
        function loadUserGoals() {
            fetch('/api/goals/list')
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.goals) {
                        const selectElements = [
                            'goalSelect',
                            'motivationGoalSelect',
                            'forecastGoalSelect',
                            'insightsGoalSelect',
                            'nlGoalSelect'
                        ];
                        
                        selectElements.forEach(selectId => {
                            const select = document.getElementById(selectId);
                            
                            // Clear existing options except the first one
                            while (select.options.length > 1) {
                                select.remove(1);
                            }
                            
                            // Add goals as options
                            data.goals.forEach(goal => {
                                const option = document.createElement('option');
                                option.value = goal.id;
                                option.textContent = goal.title;
                                select.appendChild(option);
                            });
                        });
                    }
                })
                .catch(error => {
                    console.error('Error loading goals:', error);
                });
        }
    });
</script> 