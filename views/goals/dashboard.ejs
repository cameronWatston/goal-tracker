<!-- AI Insights Dashboard Panel (Premium) -->
<% if (user && (user.subscription_plan === 'monthly' || user.subscription_plan === 'annual')) { %>

<!-- Enhanced Dashboard Header with Live Stats -->
<div class="row mb-4">
    <div class="col-12">
        <div class="dashboard-hero-section dashboard-header">
            <div class="hero-background"></div>
            <div class="hero-content">
                <div class="container-fluid">
                    <div class="row align-items-center">
                        <div class="col-md-8">
                            <div class="hero-text">
                                <h1 class="hero-title">
                                    <span id="greeting-text">Good morning</span>, <%= user.username %>! 
                                    <span class="wave-emoji">üëã</span>
                                </h1>
                                <p class="hero-subtitle" id="motivational-message">
                                    Ready to conquer your goals today?
                                </p>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="hero-stats">
                                <div class="stat-card">
                                    <div class="stat-icon">üéØ</div>
                                    <div class="stat-number" data-target="0" id="hero-active-goals">0</div>
                                    <div class="stat-label">Active Goals</div>
                                </div>
                                <div class="stat-card">
                                    <div class="stat-icon">üèÜ</div>
                                    <div class="stat-number" data-target="0" id="hero-completion-rate">0%</div>
                                    <div class="stat-label">Success Rate</div>
                                </div>
                                <div class="stat-card">
                                    <div class="stat-icon">üî•</div>
                                    <div class="stat-number" data-target="0" id="hero-streak">0</div>
                                    <div class="stat-label">Day Streak</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row mb-4">
    <div class="col-12">
        <div class="card shadow-sm border-primary">
            <div class="card-header bg-primary text-white py-3">
                <div class="d-flex align-items-center">
                    <div>
                        <h4 class="mb-0"><i class="fas fa-chart-line me-2"></i> Goal Insights</h4>
                    </div>
                    <div class="ms-auto">
                        <span class="badge bg-light text-primary">Real-time Analysis</span>
                        <button class="btn btn-light btn-sm ms-2" id="refresh-ai-insights">
                            <i class="fas fa-sync-alt"></i>
                        </button>
                    </div>
                </div>
            </div>
            <div class="card-body p-4">
                <div id="ai-dashboard-assistant-premium">
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<% } else { %>
<!-- Basic Insights for Free Users -->
<div class="row mb-4">
    <div class="col-12">
        <div class="card shadow-sm border-info">
            <div class="card-header bg-info text-white py-3">
                <div class="d-flex align-items-center">
                    <div>
                        <h4 class="mb-0"><i class="fas fa-chart-line me-2"></i> Goal Insights</h4>
                    </div>
                    <div class="ms-auto">
                        <span class="badge bg-light text-info">Basic Analysis</span>
                        <button class="btn btn-light btn-sm ms-2" id="refresh-ai-insights">
                            <i class="fas fa-sync-alt"></i>
                        </button>
                    </div>
                </div>
            </div>
            <div class="card-body p-4">
                <div id="ai-dashboard-assistant">
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Upgrade Promo Banner -->
<div class="row mb-4">
    <div class="col-12">
        <div class="card shadow-sm border-warning">
            <div class="card-body p-4">
                <div class="d-flex align-items-center">
                    <div>
                        <h5 class="mb-2"><i class="fas fa-star me-2"></i> Upgrade for Enhanced Features</h5>
                        <p class="mb-0">Get AI-powered recommendations, advanced analytics, smart goal suggestions, and priority alerts!</p>
                        <p class="mt-2 mb-0"><span class="badge bg-info">Free users</span> get basic insights. <span class="badge bg-warning">Pro users</span> get AI-powered analysis and personalized coaching.</p>
                    </div>
                    <div class="ms-auto">
                        <a href="/subscription" class="btn btn-warning">Upgrade Now</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<% } %>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-body p-4">
                    <div class="d-flex align-items-center">
                        <div>
                            <h2 class="mb-1">Your Goals</h2>
                            <p class="text-muted mb-0">Track and manage your personal and professional goals</p>
                        </div>
                        <div class="ms-auto">
                            <button class="btn btn-primary create-goal-btn" data-bs-toggle="modal" data-bs-target="#newGoalModal">
                                <i class="fas fa-plus-circle me-2"></i> Add New Goal
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Deadline Alerts Section -->
    <div class="row mb-4" id="deadline-alerts">
        <!-- This will be populated by JavaScript -->
    </div>

    <!-- Filter & Sort Controls -->
    <div class="row mb-4 filter-section">
        <div class="col-md-8">
            <div class="btn-group" role="group" aria-label="Filter goals">
                <a href="/goals/dashboard?filter=all&sort=<%= sort %>" class="btn <%= filter === 'all' ? 'btn-primary' : 'btn-outline-secondary' %>">
                    All
                </a>
                <a href="/goals/dashboard?filter=active&sort=<%= sort %>" class="btn <%= filter === 'active' ? 'btn-primary' : 'btn-outline-secondary' %>">
                    Active
                </a>
                <a href="/goals/dashboard?filter=completed&sort=<%= sort %>" class="btn <%= filter === 'completed' ? 'btn-primary' : 'btn-outline-secondary' %>">
                    Completed
                </a>
                <a href="/goals/dashboard?filter=archived&sort=<%= sort %>" class="btn <%= filter === 'archived' ? 'btn-primary' : 'btn-outline-secondary' %>">
                    Archived
                </a>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="dropdown float-end">
                <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="sortDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-sort me-1"></i> Sort By
                </button>
                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="sortDropdown">
                    <li>
                        <a class="dropdown-item <%= sort === 'newest' ? 'active' : '' %>" href="/goals/dashboard?filter=<%= filter %>&sort=newest">
                            <i class="fas fa-calendar-alt me-2"></i> Newest First
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item <%= sort === 'oldest' ? 'active' : '' %>" href="/goals/dashboard?filter=<%= filter %>&sort=oldest">
                            <i class="fas fa-calendar-alt me-2"></i> Oldest First
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item <%= sort === 'deadline' ? 'active' : '' %>" href="/goals/dashboard?filter=<%= filter %>&sort=deadline">
                            <i class="fas fa-hourglass-end me-2"></i> Upcoming Deadline
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item <%= sort === 'progress' ? 'active' : '' %>" href="/goals/dashboard?filter=<%= filter %>&sort=progress">
                            <i class="fas fa-chart-line me-2"></i> Progress
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </div>

    <!-- Goal Templates Section (Only show if user has no goals or wants to see templates) -->
    <% if (!goals || goals.length === 0) { %>
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm border-info">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0"><i class="fas fa-magic me-2"></i> Quick Start Templates</h5>
                </div>
                <div class="card-body p-4">
                    <p class="mb-4">Get started quickly with our popular goal templates:</p>
                    <div class="row g-3">
                        <div class="col-md-4">
                            <div class="card goal-template-card h-100" data-template="fitness">
                                <div class="card-body p-3">
                                    <div class="text-center mb-3">
                                        <i class="fas fa-dumbbell fa-2x text-success"></i>
                                    </div>
                                    <h6 class="card-title text-center">Fitness Journey</h6>
                                    <p class="card-text small text-muted">Get in shape with a structured workout plan</p>
                                    <button class="btn btn-outline-success btn-sm w-100 template-btn">Use Template</button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card goal-template-card h-100" data-template="learning">
                                <div class="card-body p-3">
                                    <div class="text-center mb-3">
                                        <i class="fas fa-graduation-cap fa-2x text-primary"></i>
                                    </div>
                                    <h6 class="card-title text-center">Learn New Skill</h6>
                                    <p class="card-text small text-muted">Master a new skill or hobby</p>
                                    <button class="btn btn-outline-primary btn-sm w-100 template-btn">Use Template</button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card goal-template-card h-100" data-template="career">
                                <div class="card-body p-3">
                                    <div class="text-center mb-3">
                                        <i class="fas fa-briefcase fa-2x text-warning"></i>
                                    </div>
                                    <h6 class="card-title text-center">Career Growth</h6>
                                    <p class="card-text small text-muted">Advance your professional development</p>
                                    <button class="btn btn-outline-warning btn-sm w-100 template-btn">Use Template</button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card goal-template-card h-100" data-template="finance">
                                <div class="card-body p-3">
                                    <div class="text-center mb-3">
                                        <i class="fas fa-piggy-bank fa-2x text-info"></i>
                                    </div>
                                    <h6 class="card-title text-center">Financial Goals</h6>
                                    <p class="card-text small text-muted">Save money and build financial stability</p>
                                    <button class="btn btn-outline-info btn-sm w-100 template-btn">Use Template</button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card goal-template-card h-100" data-template="creativity">
                                <div class="card-body p-3">
                                    <div class="text-center mb-3">
                                        <i class="fas fa-paint-brush fa-2x text-danger"></i>
                                    </div>
                                    <h6 class="card-title text-center">Creative Project</h6>
                                    <p class="card-text small text-muted">Complete a meaningful creative project that showcases your artistic abilities and personal expression.</p>
                                    <button class="btn btn-outline-danger btn-sm w-100 template-btn">Use Template</button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card goal-template-card h-100" data-template="health">
                                <div class="card-body p-3">
                                    <div class="text-center mb-3">
                                        <i class="fas fa-heart fa-2x text-success"></i>
                                    </div>
                                    <h6 class="card-title text-center">Health & Wellness</h6>
                                    <p class="card-text small text-muted">Improve your overall health and wellness</p>
                                    <button class="btn btn-outline-success btn-sm w-100 template-btn">Use Template</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <% } %>

    <!-- Goals Grid -->
    <div class="row g-4 mb-5">
        <% if (goals && goals.length > 0) { %>
            <% goals.forEach(goal => { %>
                <div class="col-md-6 col-lg-4 goal-card-container">
                    <div class="card h-100 goal-card" data-goal-id="<%= goal.id %>" data-tutorial="goal-cards">
                        <div class="card-body p-4">
                            <!-- Category Badge -->
                            <% 
                            let categoryColor = 'secondary';
                            let categoryIcon = 'tag';
                            
                            if (goal.category) {
                                if (goal.category === 'health') {
                                    categoryColor = 'success';
                                    categoryIcon = 'heartbeat';
                                } else if (goal.category === 'career') {
                                    categoryColor = 'primary';
                                    categoryIcon = 'briefcase';
                                } else if (goal.category === 'personal') {
                                    categoryColor = 'info';
                                    categoryIcon = 'user';
                                } else if (goal.category === 'finance') {
                                    categoryColor = 'warning';
                                    categoryIcon = 'dollar-sign';
                                } else if (goal.category === 'relationships') {
                                    categoryColor = 'danger';
                                    categoryIcon = 'heart';
                                }
                            }
                            %>
                            <span class="badge bg-<%= categoryColor %> mb-3">
                                <i class="fas fa-<%= categoryIcon %> me-1"></i>
                                <%= goal.category ? goal.category.charAt(0).toUpperCase() + goal.category.slice(1) : 'General' %>
                            </span>

                            <!-- Goal Status Badge -->
                            <% 
                            let statusColor = 'primary';
                            let statusIcon = 'clock';
                            
                            if (goal.status === 'completed') {
                                statusColor = 'success';
                                statusIcon = 'check-circle';
                            } else if (goal.status === 'archived') {
                                statusColor = 'secondary';
                                statusIcon = 'archive';
                            }
                            %>
                            <span class="badge bg-<%= statusColor %> mb-3 ms-2">
                                <i class="fas fa-<%= statusIcon %> me-1"></i>
                                <%= goal.status.charAt(0).toUpperCase() + goal.status.slice(1) %>
                            </span>

                            <!-- Goal Title & Description -->
                            <h4 class="card-title mb-2"><%= goal.title %></h4>
                            <p class="card-text text-muted mb-3">
                                <%= goal.description ? (goal.description.length > 100 ? goal.description.substring(0, 100) + '...' : goal.description) : 'No description' %>
                            </p>

                            <!-- Progress Bar -->
                            <div class="mb-3" id="progress-container-<%= goal.id %>">
                                <div class="progress" style="height: 8px;">
                                    <div class="progress-bar bg-success" role="progressbar" style="width: 0%;" 
                                        aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                                </div>
                                <div class="d-flex justify-content-between align-items-center mt-1">
                                    <small class="text-muted">Progress</small>
                                    <small class="text-muted"><span id="progress-value-<%= goal.id %>">0</span>%</small>
                                </div>
                            </div>

                            <!-- Deadline -->
                            <% 
                            const targetDate = new Date(goal.target_date);
                            const now = new Date();
                            const daysRemaining = Math.ceil((targetDate - now) / (1000 * 60 * 60 * 24));
                            
                            let deadlineClass = 'text-muted';
                            if (daysRemaining < 0) {
                                deadlineClass = 'text-danger';
                            } else if (daysRemaining <= 7) {
                                deadlineClass = 'text-warning';
                            }
                            
                            const formattedDate = targetDate.toLocaleDateString('en-US', { 
                                year: 'numeric', 
                                month: 'short', 
                                day: 'numeric' 
                            });
                            %>
                            <div class="mb-3">
                                <div class="d-flex align-items-center <%= deadlineClass %>">
                                    <i class="fas fa-calendar-alt me-2"></i>
                                    <span>
                                        <% if (daysRemaining < 0) { %>
                                            Overdue by <%= Math.abs(daysRemaining) %> days
                                        <% } else if (daysRemaining === 0) { %>
                                            Due today
                                        <% } else { %>
                                            <%= daysRemaining %> days remaining
                                        <% } %>
                                    </span>
                                    <span class="ms-auto"><%= formattedDate %></span>
                                </div>
                            </div>

                            <!-- Actions -->
                            <div class="d-flex justify-content-between mt-4">
                                <a href="/goals/detail/<%= goal.id %>" class="btn btn-primary">
                                    <i class="fas fa-chart-bar me-1"></i> View Details
                                </a>
                                <div class="dropdown">
                                    <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="goalActionDropdown<%= goal.id %>" data-bs-toggle="dropdown" aria-expanded="false">
                                        <i class="fas fa-ellipsis-v"></i>
                                    </button>
                                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="goalActionDropdown<%= goal.id %>">
                                        <li>
                                            <a class="dropdown-item" href="/goals/detail/<%= goal.id %>">
                                                <i class="fas fa-eye me-2"></i> View Details
                                            </a>
                                        </li>
                                        <li>
                                            <a class="dropdown-item edit-goal-btn" href="#" data-goal-id="<%= goal.id %>">
                                                <i class="fas fa-edit me-2"></i> Edit
                                            </a>
                                        </li>
                                        <li>
                                            <a class="dropdown-item" href="/goals/export/<%= goal.id %>">
                                                <i class="fas fa-file-export me-2"></i> Export Progress
                                            </a>
                                        </li>
                                        <li><hr class="dropdown-divider"></li>
                                        <li>
                                            <a class="dropdown-item text-danger delete-goal-btn" href="#" data-goal-id="<%= goal.id %>">
                                                <i class="fas fa-trash-alt me-2"></i> Delete
                                            </a>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            <% }) %>
        <% } else { %>
            <div class="col-12">
                <div class="text-center p-5">
                    <div class="mb-3">
                        <i class="fas fa-clipboard-list text-warning fa-5x"></i>
                    </div>
                    <h3>No Goals Found</h3>
                    <p class="text-muted mb-4">Start tracking your progress by adding a new goal</p>
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#newGoalModal">
                        <i class="fas fa-plus-circle me-2"></i> Add Your First Goal
                    </button>
                </div>
            </div>
        <% } %>
    </div>
</div>

<!-- Quick Actions Floating Button -->
<div class="quick-actions-fab">
    <div class="fab-main" id="fab-main">
        <i class="fas fa-plus"></i>
    </div>
    <div class="fab-actions" id="fab-actions">
        <div class="fab-action" data-bs-toggle="modal" data-bs-target="#newGoalModal" title="Add New Goal">
            <i class="fas fa-flag"></i>
        </div>
        <div class="fab-action" onclick="window.location.href='/goals/leaderboard'" title="View Leaderboard">
            <i class="fas fa-trophy"></i>
        </div>
        <div class="fab-action" onclick="exportAllProgress()" title="Export All Progress">
            <i class="fas fa-download"></i>
        </div>
        <div class="fab-action" onclick="showTips()" title="Quick Tips">
            <i class="fas fa-lightbulb"></i>
        </div>
    </div>
</div>

<!-- New Goal Modal -->
<div class="modal fade" id="newGoalModal" tabindex="-1" aria-labelledby="newGoalModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="newGoalModalLabel">Add New Goal</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="new-goal-form">
                    <div class="mb-3">
                        <label for="goalTitle" class="form-label">Goal Title</label>
                        <input type="text" class="form-control" id="goalTitle" placeholder="Enter your goal (e.g., Learn guitar, Run a marathon)" required>
                        <div class="form-text">Tell us what you want to achieve, and we'll create custom milestones!</div>
                    </div>
                    <div class="mb-3">
                        <label for="goalDescription" class="form-label">Additional Details (Optional)</label>
                        <textarea class="form-control" id="goalDescription" rows="2" placeholder="Any specific details about your goal? (e.g., specific guitar style, marathon date)"></textarea>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="goalCategory" class="form-label">Category</label>
                                <select class="form-select" id="goalCategory" required>
                                    <option value="">Select a category</option>
                                    <option value="health">Health & Fitness</option>
                                    <option value="career">Career & Education</option>
                                    <option value="personal">Personal Development</option>
                                    <option value="finance">Financial</option>
                                    <option value="relationships">Relationships</option>
                                    <option value="other">Other</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="goalStartDate" class="form-label">Start Date</label>
                                <input type="date" class="form-control" id="goalStartDate" required>
                                <div class="form-text">When do you want to begin?</div>
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="goalDeadline" class="form-label">Target Date</label>
                        <input type="date" class="form-control" id="goalDeadline" required>
                        <div class="form-text">When do you want to achieve this goal?</div>
                    </div>
                </form>
                
                <% if (user && (user.subscription_plan === 'monthly' || user.subscription_plan === 'annual')) { %>
                <div class="alert alert-info mt-3">
                    <i class="fas fa-magic me-2"></i> We'll automatically generate AI-powered milestones to help you achieve your goal!
                </div>
                <% } else { %>
                <div class="alert alert-info mt-3">
                    <i class="fas fa-tasks me-2"></i> We'll automatically generate 6 basic milestones to help you achieve your goal!
                </div>
                <% } %>
                
                <!-- Loading indicator (hidden by default) -->
                <div id="ai-loading-indicator" class="text-center p-3 d-none">
                    <div class="spinner-border text-primary mb-2" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <% if (user && (user.subscription_plan === 'monthly' || user.subscription_plan === 'annual')) { %>
                    <p class="mb-0">Creating your personalized AI milestones...</p>
                    <% } else { %>
                    <p class="mb-0">Creating your milestones...</p>
                    <% } %>
                </div>
                
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="save-goal-btn">Create Goal</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Goal Modal -->
<div class="modal fade" id="editGoalModal" tabindex="-1" aria-labelledby="editGoalModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editGoalModalLabel">Edit Goal</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="edit-goal-form">
                    <input type="hidden" id="editGoalId">
                    <div class="mb-3">
                        <label for="editGoalTitle" class="form-label">Goal Title</label>
                        <input type="text" class="form-control" id="editGoalTitle" placeholder="Enter goal title" required>
                    </div>
                    <div class="mb-3">
                        <label for="editGoalDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="editGoalDescription" rows="3" placeholder="Describe your goal"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="editGoalCategory" class="form-label">Category</label>
                        <select class="form-select" id="editGoalCategory" required>
                            <option value="">Select a category</option>
                            <option value="health">Health & Fitness</option>
                            <option value="career">Career & Education</option>
                            <option value="personal">Personal Development</option>
                            <option value="finance">Financial</option>
                            <option value="relationships">Relationships</option>
                            <option value="other">Other</option>
                        </select>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="editGoalStartDate" class="form-label">Start Date</label>
                                <input type="date" class="form-control" id="editGoalStartDate" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                    <div class="mb-3">
                        <label for="editGoalDeadline" class="form-label">Target Date</label>
                        <input type="date" class="form-control" id="editGoalDeadline" required>
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="editGoalStatus" class="form-label">Status</label>
                        <select class="form-select" id="editGoalStatus" required>
                            <option value="active">Active</option>
                            <option value="completed">Completed</option>
                            <option value="archived">Archived</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="update-goal-btn">Update Goal</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Goal Confirmation Modal -->
<div class="modal fade" id="deleteGoalModal" tabindex="-1" aria-labelledby="deleteGoalModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteGoalModalLabel">Delete Goal</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-triangle me-2"></i> Warning: This action cannot be undone!
                </div>
                <p>Are you sure you want to delete this goal? All associated milestones, logs, and notes will be permanently deleted.</p>
                <input type="hidden" id="deleteGoalId">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirm-delete-goal-btn">Delete Goal</button>
            </div>
        </div>
    </div>
</div>

<!-- Chart.js CDN -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<!-- Pass data to JavaScript -->
<script type="application/json" id="goals-data"><%- JSON.stringify(goals || []) %></script>
<script type="application/json" id="user-data"><%- JSON.stringify({subscription_plan: user ? user.subscription_plan : ''}) %></script>

<!-- JavaScript for Dashboard Functionality -->
<script>
// Get goals data from JSON script tag
const pageGoalsData = JSON.parse(document.getElementById('goals-data').textContent);
const currentUser = JSON.parse(document.getElementById('user-data').textContent);

document.addEventListener('DOMContentLoaded', function() {
    console.log('Dashboard loaded, initializing...'); // Debug log
    
    // Get goal IDs from the page first
    const goalCards = document.querySelectorAll('[data-goal-id]');
    console.log('Found goal cards:', goalCards.length); // Debug log
    
    // Load deadline alerts
    loadDeadlineAlerts();
    
    // Setup refresh button
    setupRefreshButton();
    
    // Update greeting and motivational message
    updateGreeting();
    loadMotivationalMessage();
    
    // Start real-time updates for hero stats
    startRealTimeUpdates();
    
    // Load Goal Insights for everyone (both premium and free users)
    const dashboardAssistantElement = document.getElementById('ai-dashboard-assistant-premium') || document.getElementById('ai-dashboard-assistant');
    if (dashboardAssistantElement) {
        console.log('Loading AI dashboard insights...'); // Debug log
        loadAIDashboardInsights();
    }
    
    // Load individual goal progress
    goalCards.forEach(card => {
        const goalId = card.getAttribute('data-goal-id');
        if (goalId) {
        fetchGoalProgress(goalId);
        }
    });
    
    // Setup refresh button
    function setupRefreshButton() {
        const refreshBtn = document.getElementById('refresh-ai-insights');
        if (refreshBtn) {
            refreshBtn.addEventListener('click', function() {
                console.log('Refreshing insights...'); // Debug log
                this.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
                
                // Reload Goal Insights
                loadAIDashboardInsights();
                
                // Reset button after delay
                setTimeout(() => {
                    this.innerHTML = '<i class="fas fa-sync-alt"></i>';
                    showNotification('Insights refreshed!', 'success');
                }, 1000);
            });
        }
    }
    
    // Dynamic greeting function
    function updateGreeting() {
        const hour = new Date().getHours();
        let greeting, emoji;
        
        if (hour < 12) {
            greeting = 'Good morning';
            emoji = 'üåÖ';
        } else if (hour < 17) {
            greeting = 'Good afternoon';
            emoji = '‚òÄÔ∏è';
        } else {
            greeting = 'Good evening';
            emoji = 'üåô';
        }
        
        const greetingElement = document.getElementById('greeting-text');
        if (greetingElement) {
            greetingElement.textContent = greeting;
            
            // Add emoji to the end of the greeting
            const emojiSpan = document.querySelector('.wave-emoji');
            if (emojiSpan) {
                emojiSpan.textContent = emoji;
            }
        }
    }
    
    // Load motivational message based on page data
    function loadMotivationalMessage() {
        const messageElement = document.getElementById('motivational-message');
        if (!messageElement) return;
        
        // Use page data directly instead of API call
        const goals = pageGoalsData || [];
        const messages = generateMotivationalMessages(goals);
        const randomMessage = messages[Math.floor(Math.random() * messages.length)];
        
        // Simple message update
        messageElement.textContent = randomMessage;
    }
    
    // Generate contextual motivational messages
    function generateMotivationalMessages(goals) {
        const activeGoals = goals.filter(g => g.status === 'active').length;
        const completedGoals = goals.filter(g => g.status === 'completed').length;
        const totalGoals = goals.length;
        
        const messages = [
            "Ready to conquer your goals today? üöÄ",
            "Every step forward is progress! ‚ú®",
            "Your future self will thank you! üí™",
            "Turn your dreams into plans! üéØ"
        ];
        
        if (completedGoals > 0) {
            messages.push(`Amazing! You've completed ${completedGoals} goals! üèÜ`);
        }
        
        if (activeGoals > 0) {
            messages.push(`You have ${activeGoals} active goals to crush! üí•`);
        }
        
        if (totalGoals === 0) {
            return ["Let's create your first goal and start your journey! üåü"];
        }
        
        return messages;
    }
    
    // Real-time updates
    function startRealTimeUpdates() {
        // Update stats every 30 seconds
        setInterval(() => {
            updateLiveStats();
        }, 30000);
        
        // Initial load with delay to let page load
        setTimeout(() => {
            updateLiveStats();
        }, 2000);
    }
    
    // Update live statistics
    function updateLiveStats() {
        // Fetch real user stats from API
        fetch('/api/user/stats')
            .then(response => response.json())
            .then(stats => {
                // Update hero stats with real data
                updateHeroStat('hero-active-goals', stats.goals || 0);
                updateHeroStat('hero-completion-rate', stats.successRate || 0, '%');
                updateHeroStat('hero-streak', stats.streak || 0);
                
                console.log('üìä Updated dashboard with real stats:', stats);
            })
            .catch(error => {
                console.error('Error fetching user stats:', error);
                // Fallback to goal-based calculation
                fetch('/api/goals')
                    .then(response => response.json())
                    .then(goals => {
                        const activeGoals = goals.filter(g => g.status === 'active').length;
                        const completedGoals = goals.filter(g => g.status === 'completed').length;
                        const totalGoals = goals.length;
                        const completionRate = totalGoals > 0 ? Math.round((completedGoals / totalGoals) * 100) : 0;
                        
                        // Update hero stats with fallback data (no fake streak)
                        updateHeroStat('hero-active-goals', activeGoals);
                        updateHeroStat('hero-completion-rate', completionRate, '%');
                        updateHeroStat('hero-streak', 0); // Show 0 if we can't get real streak
                    })
                    .catch(err => console.error('Error updating fallback stats:', err));
            });
    }
    
    // Update hero stat
    function updateHeroStat(elementId, newValue, suffix = '') {
        const element = document.getElementById(elementId);
        if (element) {
            const currentValue = parseInt(element.textContent.replace(/\D/g, '')) || 0;
            
            if (currentValue !== newValue) {
                animateCounter(element, currentValue, newValue, 800);
            }
        }
    }
    
    // Animate counter function
    function animateCounter(element, start, end, duration) {
        if (start === end) return;
        
        const range = end - start;
        const minTimer = 50;
        const stepTime = Math.abs(Math.floor(duration / range));
        const timer = Math.max(stepTime, minTimer);
        
        element.classList.add('counting');
        
        const startTime = new Date().getTime();
        const endTime = startTime + duration;
        
        function run() {
            const now = new Date().getTime();
            const remaining = Math.max((endTime - now) / duration, 0);
            const value = Math.round(end - (remaining * range));
            
            if (element.id.includes('completion-rate')) {
                element.textContent = value + '%';
            } else {
                element.textContent = value;
            }
            
            if (value === end) {
                element.classList.remove('counting');
            }
            
            if (remaining > 0) {
                setTimeout(run, timer);
            }
        }
        
        run();
    }
    
    // Load Goal Insights using page data (no API calls)
    function loadAIDashboardInsights() {
        const aiContainer = document.getElementById('ai-dashboard-assistant-premium') || document.getElementById('ai-dashboard-assistant');
        if (!aiContainer) return;
        
        console.log('Loading insights from page data...', pageGoalsData); // Debug log
        
        // Show loading state briefly for visual feedback
        aiContainer.innerHTML = `
            <div class="text-center py-4">
                <div class="spinner-border text-primary mb-3" role="status">
                    <span class="visually-hidden">Loading insights...</span>
                </div>
                <p class="text-muted">Loading statistics and charts...</p>
            </div>
        `;
        
        // Use page data directly (small delay for visual feedback)
        setTimeout(() => {
            const goals = pageGoalsData || [];
            
            if (goals.length > 0) {
                // Generate simple insights from page data
                const insights = generateSimpleInsights(goals);
                renderSimpleInsights(insights);
            } else {
                // No goals found - display empty state
                renderEmptyInsights();
            }
        }, 500);
    }
    
    // Generate simple, working insights from real goal data
    function generateSimpleInsights(goals) {
        const now = new Date();
        
        // Basic statistics
        const totalGoals = goals.length;
        const activeGoals = goals.filter(g => g.status === 'active');
        const completedGoals = goals.filter(g => g.status === 'completed');
        const completionRate = totalGoals > 0 ? Math.round((completedGoals.length / totalGoals) * 100) : 0;
        
        // Category analysis
        const categories = {};
        goals.forEach(goal => {
            const category = goal.category || 'other';
            categories[category] = (categories[category] || 0) + 1;
        });
        
        // Deadline analysis
        const upcomingDeadlines = activeGoals.filter(goal => {
            if (!goal.target_date) return false;
            const deadline = new Date(goal.target_date);
            const daysUntil = Math.ceil((deadline - now) / (1000 * 60 * 60 * 24));
            return daysUntil <= 30 && daysUntil > 0;
        }).map(goal => {
            const deadline = new Date(goal.target_date);
            const daysUntil = Math.ceil((deadline - now) / (1000 * 60 * 60 * 24));
            return { ...goal, daysUntil };
        });
        
        // Overdue goals
        const overdueGoals = activeGoals.filter(goal => {
            if (!goal.target_date) return false;
            const deadline = new Date(goal.target_date);
            return deadline < now;
        });
        
        // Generate summary
        let summary = "";
        if (totalGoals === 0) {
            summary = "Welcome to Goal Tracker! Ready to create your first goal and start your journey?";
        } else if (completionRate >= 80) {
            summary = `Outstanding progress! You've completed ${completionRate}% of your goals. Keep up the excellent work!`;
        } else if (completionRate >= 60) {
            summary = `Great momentum! You have a solid ${completionRate}% completion rate with ${activeGoals.length} active goals.`;
        } else if (activeGoals.length > 0) {
            summary = `You have ${activeGoals.length} active goals to focus on. Let's build momentum together!`;
        } else {
            summary = `You've completed ${completedGoals.length} goals! Time to set new challenges and continue growing.`;
        }
        
        // Generate recommendations
        const recommendations = [];
        
        if (overdueGoals.length > 0) {
            recommendations.push({
                text: `${overdueGoals.length} goal${overdueGoals.length > 1 ? 's are' : ' is'} overdue. Consider revising deadlines or breaking them into smaller steps.`,
                category: "Urgent",
                icon: "fa-exclamation-triangle"
            });
        }
        
        if (upcomingDeadlines.length > 0) {
            recommendations.push({
                text: `${upcomingDeadlines.length} goal${upcomingDeadlines.length > 1 ? 's have' : ' has'} deadlines in the next 30 days. Time to accelerate!`,
                category: "Focus",
                icon: "fa-calendar-day"
            });
        }
        
        if (activeGoals.length === 0 && completedGoals.length > 0) {
            recommendations.push({
                text: "All goals completed! Consider setting new challenges to maintain momentum.",
                category: "Growth",
                icon: "fa-plus-circle"
            });
        }
        
        // Default recommendations if none above apply
        if (recommendations.length === 0) {
            if (totalGoals > 0) {
                recommendations.push({
                    text: "Break down large goals into smaller milestones for better tracking.",
                    category: "Strategy",
                    icon: "fa-tasks"
                });
            } else {
                recommendations.push({
                    text: "Start with a SMART goal: Specific, Measurable, Achievable, Relevant, Time-bound.",
                    category: "Getting Started",
                    icon: "fa-lightbulb"
                });
            }
        }
        
        // Priority goal (most urgent deadline)
        let topPriority = null;
        let priorityGoalId = null;
        
        if (upcomingDeadlines.length > 0) {
            const mostUrgent = upcomingDeadlines.reduce((prev, current) => 
                prev.daysUntil < current.daysUntil ? prev : current
            );
            topPriority = `"${mostUrgent.title}" is due in ${mostUrgent.daysUntil} day${mostUrgent.daysUntil > 1 ? 's' : ''}. Make this your focus!`;
            priorityGoalId = mostUrgent.id;
        } else if (overdueGoals.length > 0) {
            const firstOverdue = overdueGoals[0];
            topPriority = `"${firstOverdue.title}" is overdue. Time to take action!`;
            priorityGoalId = firstOverdue.id;
        }
        
        return {
            summary,
            topPriority,
            priorityGoalId,
            recommendations: recommendations.slice(0, 4),
            completionRate,
            activeGoals: activeGoals.length,
            completedGoals: completedGoals.length,
            categories,
            overdueCount: overdueGoals.length
        };
    }
    
    // Render simple insights with statistics and charts
    function renderSimpleInsights(insights) {
        const aiContainer = document.getElementById('ai-dashboard-assistant-premium') || document.getElementById('ai-dashboard-assistant');
        if (!aiContainer) return;
        
        const html = `
            <div class="statistics-dashboard">
                <!-- Statistics Overview -->
                <div class="row mb-4">
                    <div class="col-md-3">
                        <div class="stat-card">
                            <div class="stat-icon text-primary">
                                <i class="fas fa-flag"></i>
                            </div>
                            <div class="stat-number">${insights.activeGoals + insights.completedGoals}</div>
                            <div class="stat-label">Total Goals</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stat-card">
                            <div class="stat-icon text-success">
                                <i class="fas fa-check-circle"></i>
                            </div>
                            <div class="stat-number">${insights.completedGoals}</div>
                            <div class="stat-label">Completed</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stat-card">
                            <div class="stat-icon text-warning">
                                <i class="fas fa-play-circle"></i>
                            </div>
                            <div class="stat-number">${insights.activeGoals}</div>
                            <div class="stat-label">Active</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stat-card">
                            <div class="stat-icon text-info">
                                <i class="fas fa-percentage"></i>
                            </div>
                            <div class="stat-number">${insights.completionRate}%</div>
                            <div class="stat-label">Success Rate</div>
                        </div>
                    </div>
                </div>

                <!-- Charts Section -->
                <div class="row mb-4">
                    <div class="col-md-6">
                        <div class="chart-card">
                            <h6 class="chart-title">Goal Completion Progress</h6>
                            <div class="chart-container">
                                <canvas id="completionChart" width="300" height="200"></canvas>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="chart-card">
                            <h6 class="chart-title">Goals by Category</h6>
                            <div class="chart-container">
                                <canvas id="categoryChart" width="300" height="200"></canvas>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Summary Section -->
                <div class="row">
                    <div class="col-12">
                        <div class="summary-section">
                            <h6><i class="fas fa-lightbulb me-2"></i>Summary</h6>
                            <p class="mb-3">${insights.summary}</p>
                            
                            ${insights.topPriority ? `
                                <div class="alert alert-warning">
                                    <i class="fas fa-flag me-2"></i><strong>Priority:</strong> ${insights.topPriority}
                                </div>
                            ` : ''}
                            
                            ${insights.recommendations.length > 0 ? `
                                <div class="recommendations">
                                    <h6><i class="fas fa-compass me-2"></i>Recommendations</h6>
                                    <ul class="list-unstyled">
                                        ${insights.recommendations.map(rec => `
                                            <li class="mb-2">
                                                <i class="fas ${rec.icon} me-2 text-muted"></i>
                                                <strong>${rec.category}:</strong> ${rec.text}
                                            </li>
                                        `).join('')}
                                    </ul>
                                </div>
                            ` : ''}
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        aiContainer.innerHTML = html;
        
        // Create charts after DOM is updated
        setTimeout(() => {
            createCompletionChart(insights);
            createCategoryChart(insights.categories);
        }, 100);
    }
    
    // Render empty state
    function renderEmptyInsights() {
        const aiContainer = document.getElementById('ai-dashboard-assistant-premium') || document.getElementById('ai-dashboard-assistant');
        if (!aiContainer) return;
        
        aiContainer.innerHTML = `
            <div class="empty-insights">
                <div class="text-center py-5">
                    <div class="empty-icon mb-3">
                        <i class="fas fa-compass fa-3x text-primary"></i>
                    </div>
                    <h5 class="empty-title">Ready to Start Your Journey?</h5>
                    <p class="text-muted mb-4">Create your first goal to see personalized insights and recommendations.</p>
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#newGoalModal">
                        <i class="fas fa-plus-circle me-2"></i> Create Your First Goal
                    </button>
                </div>
            </div>
        `;
    }
    
    // Render error state
    function renderInsightsError(errorMessage) {
        const aiContainer = document.getElementById('ai-dashboard-assistant-premium') || document.getElementById('ai-dashboard-assistant');
        if (!aiContainer) return;
        
        let helpText = 'Please try refreshing the page or checking your connection.';
        let actionButton = `
            <button class="btn btn-outline-primary" onclick="loadAIDashboardInsights()">
                <i class="fas fa-sync me-2"></i> Try Again
            </button>
        `;
        
        // Provide specific help based on error type
        if (errorMessage.includes('log in')) {
            helpText = 'Please log in to your account to view goal insights.';
            actionButton = `
                <a href="/auth/login" class="btn btn-primary">
                    <i class="fas fa-sign-in-alt me-2"></i> Log In
                </a>
            `;
        } else if (errorMessage.includes('Access denied')) {
            helpText = 'There was an authentication issue. Please try logging in again.';
            actionButton = `
                <a href="/auth/login" class="btn btn-primary">
                    <i class="fas fa-sign-in-alt me-2"></i> Log In Again
                </a>
            `;
        }
        
        aiContainer.innerHTML = `
            <div class="error-insights">
                <div class="text-center py-4">
                    <div class="error-icon mb-3">
                        <i class="fas fa-exclamation-triangle fa-2x text-warning"></i>
                    </div>
                    <h5>Unable to Load Insights</h5>
                    <p class="text-muted mb-3">${errorMessage}</p>
                    <p class="text-muted small mb-3">${helpText}</p>
                    ${actionButton}
                </div>
            </div>
        `;
    }
    
    // Function to create completion progress chart
    function createCompletionChart(insights) {
        const ctx = document.getElementById('completionChart');
        if (!ctx) return;
        
        const total = insights.activeGoals + insights.completedGoals;
        const completed = insights.completedGoals;
        const active = insights.activeGoals;
        
        new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: ['Completed', 'Active'],
                datasets: [{
                    data: [completed, active],
                    backgroundColor: ['#28a745', '#ffc107'],
                    borderWidth: 2,
                    borderColor: '#fff'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: {
                            padding: 15,
                            usePointStyle: true,
                            font: {
                                size: 12
                            }
                        }
                    }
                }
            }
        });
    }
    
    // Function to create category chart
    function createCategoryChart(categoryData) {
        const ctx = document.getElementById('categoryChart');
        if (!ctx) return;
        
        const categories = Object.keys(categoryData);
        const counts = Object.values(categoryData);
        
        if (categories.length === 0) {
            ctx.parentNode.innerHTML = '<p class="text-muted text-center">No category data available</p>';
            return;
        }
        
        const categoryLabels = {
            health: 'Health & Fitness',
            career: 'Career & Education',
            personal: 'Personal Development',
            finance: 'Financial',
            relationships: 'Relationships',
            other: 'Other'
        };
        
        const colors = {
            health: '#28a745',
            career: '#007bff',
            personal: '#17a2b8',
            finance: '#ffc107',
            relationships: '#dc3545',
            other: '#6c757d'
        };
        
        new Chart(ctx, {
            type: 'pie',
            data: {
                labels: categories.map(cat => categoryLabels[cat] || cat),
                datasets: [{
                    data: counts,
                    backgroundColor: categories.map(cat => colors[cat] || '#6c757d'),
                    borderWidth: 2,
                    borderColor: '#fff'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: {
                            padding: 15,
                            usePointStyle: true,
                            font: {
                                size: 12
                            }
                        }
                    }
                }
            }
        });
    }
    
    // Function to display recent progress
    function displayRecentProgress(goals) {
        const recentProgressContainer = document.getElementById('recent-progress');
        if (!recentProgressContainer) return;
        
        // Calculate progress for each goal
        const goalsWithProgress = goals.map(goal => {
            const totalMilestones = goal.milestones.length;
            const completedMilestones = goal.milestones.filter(m => m.status === 'completed').length;
            const progressPercent = totalMilestones > 0 ? Math.round((completedMilestones / totalMilestones) * 100) : 0;
            
            return {
                ...goal,
                progressPercent,
                totalMilestones,
                completedMilestones
            };
        });
        
        // Sort by recent activity (you could enhance this with actual activity data)
        goalsWithProgress.sort((a, b) => new Date(b.updated_at || b.created_at) - new Date(a.updated_at || a.created_at));
        
        // Display top 5 recent goals
        const recentGoals = goalsWithProgress.slice(0, 5);
        
        let progressHtml = '';
        recentGoals.forEach(goal => {
            const statusColor = goal.status === 'completed' ? 'success' : 
                               goal.status === 'active' ? 'primary' : 'secondary';
            
            progressHtml += `
                <div class="d-flex align-items-center mb-3">
                    <div class="flex-grow-1">
                        <div class="d-flex justify-content-between align-items-center mb-1">
                            <a href="/goals/detail/${goal.id}" class="fw-bold text-decoration-none goal-progress-link">${goal.title}</a>
                            <span class="badge bg-${statusColor}">${goal.progressPercent}%</span>
                        </div>
                        <div class="progress" style="height: 6px;">
                            <div class="progress-bar bg-${statusColor}" style="width: ${goal.progressPercent}%"></div>
                        </div>
                        <small class="text-muted">${goal.completedMilestones}/${goal.totalMilestones} milestones completed</small>
                    </div>
                </div>
            `;
        });
        
        if (progressHtml === '') {
            progressHtml = '<p class="text-muted">No recent progress to display.</p>';
        }
        
        recentProgressContainer.innerHTML = progressHtml;
    }
    
    // AI Dashboard Assistant for both premium and free users
    const aiDashboardAssistant = document.getElementById('ai-dashboard-assistant-premium') || document.getElementById('ai-dashboard-assistant');
    if (aiDashboardAssistant) {
        loadAIDashboardInsights();
    }
    
    // Function to render empty state
    function renderEmptyAIAssistant() {
        aiDashboardAssistant.innerHTML = `
            <div class="text-center py-4">
                <i class="fas fa-robot fa-3x text-muted mb-3"></i>
                <h5>Create Your First Goal</h5>
                <p class="text-muted">Add a goal to get personalized AI insights and recommendations.</p>
                <button class="btn btn-primary mt-2" data-bs-toggle="modal" data-bs-target="#newGoalModal">
                    <i class="fas fa-plus-circle me-2"></i> Add Your First Goal
                </button>
            </div>
        `;
    }
    
    // Function to render error state
    function renderAIAssistantError(errorMessage) {
        aiDashboardAssistant.innerHTML = `
            <div class="text-center py-4">
                <i class="fas fa-exclamation-triangle fa-3x text-warning mb-3"></i>
                <h5>Oops! Something went wrong</h5>
                <p class="text-muted">${errorMessage}</p>
                <button class="btn btn-outline-primary mt-2" onclick="loadAIDashboardInsights()">
                    <i class="fas fa-sync me-2"></i> Try Again
                </button>
            </div>
        `;
    }
    
    // AI SMART Goal generation for premium users
    const generateSmartGoalBtn = document.getElementById('generate-smart-goal-btn');
    if (generateSmartGoalBtn) {
        generateSmartGoalBtn.addEventListener('click', function() {
            const userInput = document.getElementById('aiGoalInput').value;
            if (!userInput) {
                alert('Please describe your goal');
                return;
            }
            
            // Show loading state
            this.disabled = true;
            this.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Generating...';
            
            // Call the AI service
            fetch('/api/ai/smart-goal', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ userInput }),
            })
            .then(response => response.json())
            .then(data => {
                // Reset button state
                generateSmartGoalBtn.disabled = false;
                generateSmartGoalBtn.innerHTML = '<i class="fas fa-robot me-1"></i> Generate SMART Goal';
                
                if (data.success && data.data) {
                    // Display the result
                    const result = typeof data.data === 'string' ? JSON.parse(data.data) : data.data;
                    
                    document.getElementById('ai-goal-title').textContent = result.title;
                    document.getElementById('ai-goal-description').textContent = result.description;
                    document.getElementById('ai-goal-metrics').textContent = result.metrics;
                    document.getElementById('ai-goal-timeframe').textContent = result.timeframe;
                    
                    // Store the result as a data attribute
                    document.getElementById('ai-goal-result').dataset.goalData = JSON.stringify(result);
                    
                    // Show the result
                    document.getElementById('ai-goal-result').classList.remove('d-none');
                } else {
                    alert('Error generating SMART goal: ' + (data.error || 'Unknown error'));
                }
            })
            .catch(error => {
                // Reset button state
                generateSmartGoalBtn.disabled = false;
                generateSmartGoalBtn.innerHTML = '<i class="fas fa-robot me-1"></i> Generate SMART Goal';
                
                console.error('Error:', error);
                alert('Error generating SMART goal. Please try again.');
            });
        });
    }
    
    // Set default dates when new goal modal opens
    document.getElementById('newGoalModal').addEventListener('show.bs.modal', function() {
        const today = new Date().toISOString().split('T')[0];
        const oneMonthFromNow = new Date();
        oneMonthFromNow.setMonth(oneMonthFromNow.getMonth() + 1);
        const defaultTargetDate = oneMonthFromNow.toISOString().split('T')[0];
        
        document.getElementById('goalStartDate').value = today;
        document.getElementById('goalDeadline').value = defaultTargetDate;
    });
    
    // Simplified goal creation - auto-generates milestones
    document.getElementById('save-goal-btn').addEventListener('click', function() {
        // Get goal information
        const title = document.getElementById('goalTitle').value;
        const description = document.getElementById('goalDescription').value || '';
        const category = document.getElementById('goalCategory').value;
        const startDate = document.getElementById('goalStartDate').value;
        const targetDate = document.getElementById('goalDeadline').value;
        
        if (!title || !targetDate || !category || !startDate) {
            alert('Please fill in all required fields');
            return;
        }
        
        // Validate dates
        if (new Date(startDate) >= new Date(targetDate)) {
            alert('Start date must be before target date');
            return;
        }

        // Show loading indicator
        document.getElementById('ai-loading-indicator').classList.remove('d-none');
        const saveButton = document.getElementById('save-goal-btn');
        saveButton.disabled = true;
        saveButton.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Creating your goal...';
        
        // Send request to create goal with auto-generated milestones
        fetch('/api/goals', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                title,
                description,
                category,
                startDate,
                targetDate
            })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            // Hide loading indicator
            document.getElementById('ai-loading-indicator').classList.add('d-none');
            saveButton.disabled = false;
            saveButton.innerHTML = 'Create Goal';
            
            // Close modal and redirect to the goal detail page
            const modal = bootstrap.Modal.getInstance(document.getElementById('newGoalModal'));
            modal.hide();
            
            // Redirect to the goal detail page
            window.location.href = data.redirectUrl;
        })
        .catch(error => {
            // Hide loading indicator on error
            document.getElementById('ai-loading-indicator').classList.add('d-none');
            saveButton.disabled = false;
            saveButton.innerHTML = 'Create Goal';
            
            console.error('Error creating goal:', error);
            alert('Failed to create goal. Please try again.');
        });
    });
    
    // Helper function to try to extract a date from timeframe text
    function extractDateFromTimeframe(timeframe) {
        if (!timeframe) return null;
        
        // Look for common patterns
        const monthMatch = timeframe.match(/by\s+(January|February|March|April|May|June|July|August|September|October|November|December)\s+(\d{1,2})(?:st|nd|rd|th)?,?\s+(\d{4})/i);
        if (monthMatch) {
            const month = new Date(Date.parse(monthMatch[1] + " 1, 2000")).getMonth();
            const day = parseInt(monthMatch[2]);
            const year = parseInt(monthMatch[3]);
            return `${year}-${(month + 1).toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
        }
        
        // Look for "in X months" pattern
        const monthsMatch = timeframe.match(/in\s+(\d+)\s+months/i);
        if (monthsMatch) {
            const months = parseInt(monthsMatch[1]);
            const targetDate = new Date();
            targetDate.setMonth(targetDate.getMonth() + months);
            return targetDate.toISOString().split('T')[0];
        }
        
        // Look for "in X weeks" pattern
        const weeksMatch = timeframe.match(/in\s+(\d+)\s+weeks/i);
        if (weeksMatch) {
            const weeks = parseInt(weeksMatch[1]);
            const targetDate = new Date();
            targetDate.setDate(targetDate.getDate() + (weeks * 7));
            return targetDate.toISOString().split('T')[0];
        }
        
        // Default to 3 months from now if we can't extract a date
        const defaultDate = new Date();
        defaultDate.setMonth(defaultDate.getMonth() + 3);
        return defaultDate.toISOString().split('T')[0];
    }
    
    // Helper function to detect category from goal text
    function detectCategoryFromGoal(title, description) {
        const text = (title + " " + description).toLowerCase();
        
        const categories = {
            health: ['health', 'fitness', 'weight', 'diet', 'exercise', 'workout', 'run', 'gym', 'yoga', 'meditation'],
            career: ['career', 'job', 'work', 'professional', 'study', 'learn', 'course', 'degree', 'education', 'skill'],
            finance: ['finance', 'money', 'save', 'budget', 'invest', 'debt', 'loan', 'mortgage', 'retirement', 'financial'],
            relationships: ['relationship', 'family', 'friend', 'partner', 'marriage', 'social', 'connection', 'networking'],
            personal: ['personal', 'hobby', 'read', 'book', 'travel', 'creative', 'art', 'music', 'write', 'journal']
        };
        
        for (const [category, keywords] of Object.entries(categories)) {
            for (const keyword of keywords) {
                if (text.includes(keyword)) {
                    return category;
                }
            }
        }
        
        return 'personal'; // Default category
    }
    
    // Edit goal button handler
    document.querySelectorAll('.edit-goal-btn').forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            const goalId = this.getAttribute('data-goal-id');
            
            // Fetch goal data
            fetch(`/api/goals/${goalId}`)
                .then(response => response.json())
                .then(goal => {
                    document.getElementById('editGoalId').value = goal.id;
                    document.getElementById('editGoalTitle').value = goal.title;
                    document.getElementById('editGoalDescription').value = goal.description || '';
                    document.getElementById('editGoalCategory').value = goal.category || '';
                    document.getElementById('editGoalStartDate').value = goal.start_date;
                    document.getElementById('editGoalDeadline').value = goal.target_date;
                    document.getElementById('editGoalStatus').value = goal.status;
                    
                    const modal = new bootstrap.Modal(document.getElementById('editGoalModal'));
                    modal.show();
                })
                .catch(error => console.error('Error fetching goal data:', error));
        });
    });
    
    // Update goal
    document.getElementById('update-goal-btn').addEventListener('click', function() {
        const goalId = document.getElementById('editGoalId').value;
        const title = document.getElementById('editGoalTitle').value;
        const description = document.getElementById('editGoalDescription').value;
        const category = document.getElementById('editGoalCategory').value;
        const startDate = document.getElementById('editGoalStartDate').value;
        const targetDate = document.getElementById('editGoalDeadline').value;
        const status = document.getElementById('editGoalStatus').value;
        
        if (!title || !category || !startDate || !targetDate || !status) {
            alert('Please fill in all required fields');
            return;
        }
        
        // Validate dates
        if (new Date(startDate) >= new Date(targetDate)) {
            alert('Start date must be before target date');
            return;
        }
        
        // Send request to update goal
        fetch(`/api/goals/${goalId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                title,
                description,
                category,
                startDate,
                targetDate,
                status
            })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            // Close modal and refresh page to show updated goal
            const modal = bootstrap.Modal.getInstance(document.getElementById('editGoalModal'));
            modal.hide();
            window.location.reload();
        })
        .catch(error => {
            console.error('Error updating goal:', error);
            alert('Failed to update goal. Please try again.');
        });
    });
    
    // Delete goal button handler
    document.querySelectorAll('.delete-goal-btn').forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            const goalId = this.getAttribute('data-goal-id');
            document.getElementById('deleteGoalId').value = goalId;
            
            const modal = new bootstrap.Modal(document.getElementById('deleteGoalModal'));
            modal.show();
        });
    });
    
    // Confirm delete goal
    document.getElementById('confirm-delete-goal-btn').addEventListener('click', function() {
        const goalId = document.getElementById('deleteGoalId').value;
        
        // Send request to delete goal
        fetch(`/api/goals/${goalId}`, {
            method: 'DELETE',
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            // Close modal and refresh page
            const modal = bootstrap.Modal.getInstance(document.getElementById('deleteGoalModal'));
            modal.hide();
            window.location.reload();
        })
        .catch(error => {
            console.error('Error deleting goal:', error);
            alert('Failed to delete goal. Please try again.');
        });
    });

    // Goal Templates Data
    const goalTemplates = {
        fitness: {
            title: "Get Fit and Healthy",
            description: "Transform your health with a comprehensive fitness plan including regular exercise, proper nutrition, and lifestyle changes.",
            category: "health",
            duration: 3 // months
        },
        learning: {
            title: "Learn a New Skill",
            description: "Master a new skill through structured learning, practice, and consistent effort.",
            category: "personal",
            duration: 4
        },
        career: {
            title: "Advance My Career",
            description: "Develop professional skills, expand network, and pursue opportunities for career growth.",
            category: "career",
            duration: 6
        },
        finance: {
            title: "Improve Financial Health",
            description: "Build savings, reduce debt, and create a sustainable budget for long-term financial stability.",
            category: "finance",
            duration: 12
        },
        creativity: {
            title: "Complete Creative Project",
            description: "Finish a meaningful creative project that showcases your artistic abilities and personal expression.",
            category: "personal",
            duration: 2
        },
        health: {
            title: "Improve Overall Wellness",
            description: "Focus on mental and physical health through better habits, stress management, and self-care.",
            category: "health",
            duration: 3
        }
    };
    
    // Handle template selection
    document.querySelectorAll('.template-btn').forEach(button => {
        button.addEventListener('click', function() {
            const templateCard = this.closest('.goal-template-card');
            const templateKey = templateCard.getAttribute('data-template');
            const template = goalTemplates[templateKey];
            
            if (template) {
                // Auto-populate the goal form with template data
                document.getElementById('goalTitle').value = template.title;
                document.getElementById('goalDescription').value = template.description;
                document.getElementById('goalCategory').value = template.category;
                
                // Set dates - start today, end based on template duration
                const today = new Date().toISOString().split('T')[0];
                const endDate = new Date();
                endDate.setMonth(endDate.getMonth() + template.duration);
                
                document.getElementById('goalStartDate').value = today;
                document.getElementById('goalDeadline').value = endDate.toISOString().split('T')[0];
                
                // Open the new goal modal
                const modal = new bootstrap.Modal(document.getElementById('newGoalModal'));
                modal.show();
                
                // Add visual indication that this was from a template
                const modalTitle = document.querySelector('#newGoalModalLabel');
                modalTitle.innerHTML = `<i class="fas fa-magic me-2"></i> Create Goal from Template`;
            }
        });
    });
    
    // Reset modal title when modal is closed
    document.getElementById('newGoalModal').addEventListener('hidden.bs.modal', function() {
        document.querySelector('#newGoalModalLabel').innerHTML = 'Add New Goal';
    });
    
    // Quick Actions Functions
    window.exportAllProgress = function() {
        // Create a simple CSV export of all goals
        fetch('/api/goals')
            .then(response => response.json())
            .then(goals => {
                if (goals && goals.length > 0) {
                    let csvContent = 'Goal Title,Description,Category,Status,Target Date,Created Date\n';
                    
                    goals.forEach(goal => {
                        const title = (goal.title || '').replace(/"/g, '""');
                        const description = (goal.description || '').replace(/"/g, '""');
                        const category = goal.category || '';
                        const status = goal.status || '';
                        const targetDate = goal.target_date ? new Date(goal.target_date).toLocaleDateString() : '';
                        const createdDate = goal.created_at ? new Date(goal.created_at).toLocaleDateString() : '';
                        
                        csvContent += `"${title}","${description}","${category}","${status}","${targetDate}","${createdDate}"\n`;
                    });
                    
                    // Create and trigger download
                    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
                    const link = document.createElement('a');
                    const url = URL.createObjectURL(blob);
                    link.setAttribute('href', url);
                    link.setAttribute('download', `goals_export_${new Date().toISOString().split('T')[0]}.csv`);
                    link.style.visibility = 'hidden';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                    
                    // Show success message
                    showNotification('Goals exported successfully!', 'success');
                } else {
                    showNotification('No goals to export', 'info');
                }
            })
            .catch(error => {
                console.error('Error exporting goals:', error);
                showNotification('Failed to export goals', 'error');
            });
    };
    
    window.showTips = function() {
        const tips = [
            {
                title: 'Set SMART Goals',
                content: 'Make your goals Specific, Measurable, Achievable, Relevant, and Time-bound for better success rates.'
            },
            {
                title: 'Break It Down',
                content: 'Large goals can be overwhelming. Break them into smaller, manageable milestones.'
            },
            {
                title: 'Track Progress Daily',
                content: 'Regular check-ins help you stay on track and motivated. Use our check-in feature!'
            },
            {
                title: 'Celebrate Small Wins',
                content: 'Acknowledge and celebrate when you complete milestones. It keeps you motivated!'
            },
            {
                title: 'Stay Flexible',
                content: 'Goals can evolve. Don\'t be afraid to adjust your timeline or approach when needed.'
            }
        ];
        
        const randomTip = tips[Math.floor(Math.random() * tips.length)];
        
        // Create and show tip modal
        const tipModal = document.createElement('div');
        tipModal.className = 'modal fade';
        tipModal.innerHTML = `
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header bg-primary text-white">
                        <h5 class="modal-title"><i class="fas fa-lightbulb me-2"></i>${randomTip.title}</h5>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body p-4">
                        <p class="mb-0">${randomTip.content}</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Got it!</button>
                        <button type="button" class="btn btn-primary" onclick="showTips()">Another Tip</button>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(tipModal);
        const modal = new bootstrap.Modal(tipModal);
        modal.show();
        
        // Remove modal from DOM when hidden
        tipModal.addEventListener('hidden.bs.modal', function() {
            document.body.removeChild(tipModal);
        });
    };
    
    // Notification system
    window.showNotification = function(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show position-fixed`;
        notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; max-width: 300px;';
        notification.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        document.body.appendChild(notification);
        
        // Auto-remove after 4 seconds
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 4000);
    };

    /* Quick Actions Floating Button */
    const fabMain = document.getElementById('fab-main');
    const fabActions = document.getElementById('fab-actions');

    fabMain.addEventListener('click', function() {
        fabActions.classList.toggle('active');
    });

    // Close fab actions when clicking outside
    document.addEventListener('click', function(event) {
        if (event.target !== fabMain && !fabMain.contains(event.target)) {
            fabActions.classList.remove('active');
        }
    });

    // Achievement Cards Animation
    const achievementCards = document.querySelectorAll('.achievement-card');
    achievementCards.forEach(card => {
        card.addEventListener('click', function() {
            this.classList.toggle('hovered');
        });
    });

    // Responsive adjustments
    const mediaQuery = window.matchMedia('(max-width: 768px)');
    function handleResponsiveDesign(event) {
        if (event.matches) {
            const fabMain = document.getElementById('fab-main');
            const fabActions = document.getElementById('fab-actions');
            fabMain.style.width = '50px';
            fabMain.style.height = '50px';
            fabMain.style.fontSize = '20px';
            fabActions.style.bottom = '60px';
        } else {
            const fabMain = document.getElementById('fab-main');
            const fabActions = document.getElementById('fab-actions');
            fabMain.style.width = '60px';
            fabMain.style.height = '60px';
            fabMain.style.fontSize = '24px';
            fabActions.style.bottom = '70px';
        }
    }
    mediaQuery.addEventListener('change', handleResponsiveDesign);
    handleResponsiveDesign(mediaQuery);

    // Load deadline alerts function
    function loadDeadlineAlerts() {
        // Simple deadline alerts using page data
        const goals = pageGoalsData || [];
        const now = new Date();
        
        const urgentGoals = goals.filter(goal => {
            if (!goal.target_date || goal.status !== 'active') return false;
            const deadline = new Date(goal.target_date);
            const daysUntil = Math.ceil((deadline - now) / (1000 * 60 * 60 * 24));
            return daysUntil <= 7 && daysUntil >= 0; // Next 7 days
        });
        
        const overdueGoals = goals.filter(goal => {
            if (!goal.target_date || goal.status !== 'active') return false;
            const deadline = new Date(goal.target_date);
            return deadline < now;
        });
        
        const alertsContainer = document.getElementById('deadline-alerts');
        if (!alertsContainer) return;
        
        let alertsHtml = '';
        
        // Show overdue goals first
        if (overdueGoals.length > 0) {
            alertsHtml += `
                <div class="col-12">
                    <div class="alert alert-danger">
                        <h5><i class="fas fa-exclamation-triangle me-2"></i>Overdue Goals</h5>
                        <ul class="mb-0">
                            ${overdueGoals.map(goal => `
                                <li><strong>${goal.title}</strong> - ${Math.abs(Math.ceil((new Date(goal.target_date) - now) / (1000 * 60 * 60 * 24)))} days overdue</li>
                            `).join('')}
                        </ul>
                    </div>
                </div>
            `;
        }
        
        // Show upcoming deadlines
        if (urgentGoals.length > 0) {
            alertsHtml += `
                <div class="col-12">
                    <div class="alert alert-warning">
                        <h5><i class="fas fa-clock me-2"></i>Upcoming Deadlines</h5>
                        <ul class="mb-0">
                            ${urgentGoals.map(goal => {
                                const daysUntil = Math.ceil((new Date(goal.target_date) - now) / (1000 * 60 * 60 * 24));
                                return `<li><strong>${goal.title}</strong> - ${daysUntil === 0 ? 'Due today!' : `${daysUntil} day${daysUntil > 1 ? 's' : ''} remaining`}</li>`;
                            }).join('')}
                        </ul>
                    </div>
                </div>
            `;
        }
        
        alertsContainer.innerHTML = alertsHtml;
    }
    
    // Fetch goal progress function
    function fetchGoalProgress(goalId) {
        // Simple progress calculation using milestones if available
        // For now, we'll just set a placeholder since we don't have milestone data easily accessible
        const progressContainer = document.getElementById(`progress-container-${goalId}`);
        const progressValue = document.getElementById(`progress-value-${goalId}`);
        
        if (!progressContainer || !progressValue) return;
        
        // You can enhance this later with actual API call to get milestone progress
        // For now, just set a default progress of 0%
        const progressBar = progressContainer.querySelector('.progress-bar');
        if (progressBar) {
            progressBar.style.width = '0%';
            progressBar.setAttribute('aria-valuenow', '0');
        }
        progressValue.textContent = '0';
    }
    
    // Initialize tutorial for dashboard
    setTimeout(() => {
        // Check if this is a new user and auto-start tutorial
        checkAutoStartTutorial();
    }, 1000);
    
    // Add tutorial button functionality
    const helpBtn = document.getElementById('helpBtn');
    if (helpBtn) {
        helpBtn.onclick = (e) => {
            e.preventDefault();
            startTutorial('dashboard');
        };
    }
});
</script>

<style>
.goal-card {
    transition: all 0.3s ease;
    border-top: 5px solid var(--primary-color);
}

.goal-card:hover {
    transform: translateY(-10px);
    box-shadow: 0 10px 20px rgba(0,0,0,0.1);
}

.goal-card .progress {
    overflow: visible;
    background-color: #f0f0f0;
    box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.1) inset;
}

.goal-card .progress-bar {
    position: relative;
    overflow: visible;
    border-radius: 4px;
    transition: width 0.6s ease;
}

/* Category colors */
.goal-card[data-category="health"] {
    border-top-color: var(--success-color);
}

.goal-card[data-category="career"] {
    border-top-color: var(--primary-color);
}

.goal-card[data-category="personal"] {
    border-top-color: var(--info-color);
}

.goal-card[data-category="finance"] {
    border-top-color: var(--warning-color);
}

.goal-card[data-category="relationships"] {
    border-top-color: var(--danger-color);
}

/* Status styles */
.goal-card[data-status="completed"] {
    background-color: rgba(46, 204, 113, 0.05);
}

.goal-card[data-status="archived"] {
    opacity: 0.7;
}

/* Animation */
@keyframes progressAnimation {
    0% {
        width: 0%;
    }
}

.progress-bar {
    animation: progressAnimation 1s ease-in-out;
}

/* Goal Template Styles */
.goal-template-card {
    transition: all 0.3s ease;
    border: 2px solid transparent;
    cursor: pointer;
}

.goal-template-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    border-color: var(--bs-primary);
}

.goal-template-card:hover .template-btn {
    transform: scale(1.05);
}

.template-btn {
    transition: all 0.2s ease;
}

.goal-template-card[data-template="fitness"]:hover {
    border-color: var(--bs-success);
}

.goal-template-card[data-template="learning"]:hover {
    border-color: var(--bs-primary);
}

.goal-template-card[data-template="career"]:hover {
    border-color: var(--bs-warning);
}

.goal-template-card[data-template="finance"]:hover {
    border-color: var(--bs-info);
}

.goal-template-card[data-template="creativity"]:hover {
    border-color: var(--bs-danger);
}

.goal-template-card[data-template="health"]:hover {
    border-color: var(--bs-success);
}

/* Quick Actions Floating Button */
.quick-actions-fab {
    position: fixed;
    bottom: 30px;
    right: 30px;
    z-index: 1000;
}

.fab-main {
    width: 60px;
    height: 60px;
    background: linear-gradient(135deg, #007bff, #0056b3);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    cursor: pointer;
    box-shadow: 0 4px 12px rgba(0, 123, 255, 0.4);
    transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
}

.fab-main:hover {
    transform: scale(1.1);
    box-shadow: 0 6px 20px rgba(0, 123, 255, 0.6);
}

.fab-main i {
    font-size: 24px;
    transition: transform 0.3s ease;
}

.fab-main.active i {
    transform: rotate(45deg);
}

.fab-actions {
    position: absolute;
    bottom: 70px;
    right: 0;
    display: flex;
    flex-direction: column;
    gap: 15px;
    opacity: 0;
    visibility: hidden;
    transform: translateY(20px);
    transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
}

.fab-actions.active {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
}

.fab-action {
    width: 45px;
    height: 45px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
}

.fab-action:nth-child(1) { background: linear-gradient(135deg, #28a745, #1e7e34); }
.fab-action:nth-child(2) { background: linear-gradient(135deg, #ffc107, #e0a800); }
.fab-action:nth-child(3) { background: linear-gradient(135deg, #17a2b8, #138496); }
.fab-action:nth-child(4) { background: linear-gradient(135deg, #dc3545, #c82333); }

.fab-action:hover {
    transform: scale(1.1);
    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
}

.fab-action::before {
    content: attr(title);
    position: absolute;
    right: 55px;
    background: rgba(0,0,0,0.8);
    color: white;
    padding: 5px 10px;
    border-radius: 4px;
    font-size: 12px;
    white-space: nowrap;
    opacity: 0;
    transform: translateX(10px);
    transition: all 0.3s ease;
    pointer-events: none;
}

.fab-action:hover::before {
    opacity: 1;
    transform: translateX(0);
}

/* Achievement Cards Animation */
.achievement-card {
    transition: transform 0.3s ease;
}

.achievement-card:hover {
    transform: scale(1.05);
}

/* Goal Progress Links */
.goal-progress-link {
    color: #495057 !important;
    transition: all 0.2s ease;
}

.goal-progress-link:hover {
    color: #007bff !important;
    text-decoration: underline !important;
    transform: translateX(3px);
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .quick-actions-fab {
        bottom: 20px;
        right: 20px;
    }
    
    .fab-main {
        width: 50px;
        height: 50px;
    }
    
    .fab-main i {
        font-size: 20px;
    }
    
    .fab-action {
        width: 40px;
        height: 40px;
    }
    
    .fab-actions {
        bottom: 60px;
    }
}

/* Chart Container Fixes */
.chart-container {
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
}

.chart-container canvas {
    max-width: 100% !important;
    max-height: 100% !important;
}

/* Enhanced Dashboard Hero Section */
.dashboard-hero-section {
    position: relative;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 20px;
    overflow: hidden;
    color: white;
    min-height: 200px;
    margin-bottom: 2rem;
}

.hero-background {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" patternUnits="userSpaceOnUse" width="100" height="100"><circle cx="50" cy="50" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
    opacity: 0.3;
}

.hero-content {
    position: relative;
    z-index: 2;
    padding: 3rem 2rem;
}

.hero-title {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 1rem;
    background: linear-gradient(45deg, #ffffff, #f0f8ff);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

.wave-emoji {
    display: inline-block;
    animation: wave 1s ease-in-out infinite;
}

@keyframes wave {
    0%, 100% { transform: rotate(0deg); }
    50% { transform: rotate(20deg); }
}

.hero-subtitle {
    font-size: 1.2rem;
    opacity: 0.9;
    margin-bottom: 0;
}

.hero-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 1rem;
    justify-content: end;
}

.stat-card {
    background: rgba(255, 255, 255, 0.15);
    backdrop-filter: blur(10px);
    border-radius: 15px;
    padding: 1.5rem 1rem;
    text-align: center;
    border: 1px solid rgba(255, 255, 255, 0.2);
    transition: all 0.3s ease;
}

.stat-card:hover {
    transform: translateY(-5px);
    background: rgba(255, 255, 255, 0.2);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
}

.stat-icon {
    font-size: 2rem;
    margin-bottom: 0.5rem;
    display: block;
}

.stat-number {
    font-size: 2rem;
    font-weight: 700;
    margin-bottom: 0.25rem;
    color: #ffffff;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
}

.hero-stats .stat-card .stat-label,
.stat-card .stat-label {
    font-size: 0.85rem;
    opacity: 0.9;
    text-transform: uppercase;
    color: #ffffff !important;
    letter-spacing: 1px;
    font-weight: 500;
}

/* Animated Counter */
@keyframes countUp {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
}

.stat-number.counting {
    animation: countUp 0.6s ease-out;
}

/* Enhanced AI Assistant Panel */
.ai-avatar {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
    border: 2px solid rgba(255, 255, 255, 0.2);
    width: 50px;
    height: 50px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1.2rem;
}

/* Enhanced Progress Bars */
.goal-card .progress {
    background: linear-gradient(90deg, #f0f2f5, #e9ecef);
    border-radius: 10px;
    overflow: visible;
    height: 12px;
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);
}

.goal-card .progress-bar {
    background: linear-gradient(90deg, #667eea, #764ba2);
    border-radius: 10px;
    position: relative;
    overflow: visible;
    box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
    transition: width 1s ease-in-out;
}

.goal-card .progress-bar::after {
    content: '';
    position: absolute;
    top: 50%;
    right: -8px;
    transform: translateY(-50%);
    width: 16px;
    height: 16px;
    background: linear-gradient(135deg, #667eea, #764ba2);
    border-radius: 50%;
    border: 3px solid white;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    opacity: 0;
    transition: opacity 0.3s ease;
}

.goal-card:hover .progress-bar::after {
    opacity: 1;
}

/* Responsive Hero Section */
@media (max-width: 768px) {
    .dashboard-hero-section {
        min-height: 150px;
    }
    
    .hero-content {
        padding: 2rem 1rem;
    }
    
    .hero-title {
        font-size: 1.8rem;
    }
    
    .hero-subtitle {
        font-size: 1rem;
    }
    
    .hero-stats {
        grid-template-columns: repeat(3, 1fr);
        gap: 0.5rem;
        margin-top: 1rem;
    }
    
    .stat-card {
        padding: 1rem 0.5rem;
    }
    
    .stat-number {
        font-size: 1.5rem;
    }
    
    .stat-icon {
        font-size: 1.5rem;
    }
}

/* AI Insights Panel Styles */
.ai-insights-panel {
    background: linear-gradient(135deg, #f8f9ff 0%, #ffffff 100%);
    border-radius: 15px;
    padding: 2rem;
    border: 1px solid rgba(102, 126, 234, 0.1);
    position: relative;
    overflow: hidden;
}

.ai-insights-panel::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, #667eea, #764ba2);
}

.insights-header {
    border-bottom: 1px solid rgba(102, 126, 234, 0.1);
    padding-bottom: 1rem;
}

.ai-status-indicator {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 45px;
    height: 45px;
    background: linear-gradient(135deg, #667eea, #764ba2);
    border-radius: 50%;
    color: white;
    font-size: 1.2rem;
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
}

.status-dot {
    position: absolute;
    top: 3px;
    right: 3px;
    width: 12px;
    height: 12px;
    background: #10b981;
    border: 2px solid white;
    border-radius: 50%;
    animation: pulse-dot 2s infinite;
}

@keyframes pulse-dot {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.2); }
}

.insights-title {
    font-size: 1.3rem;
    font-weight: 700;
    color: #2c3e50;
    margin: 0;
}

.insights-subtitle {
    font-size: 0.9rem;
    color: #6c757d;
    margin: 0;
}

.analysis-timestamp {
    font-size: 0.75rem;
    color: #9ca3af;
    background: rgba(102, 126, 234, 0.1);
    padding: 0.25rem 0.75rem;
    border-radius: 12px;
}

/* Summary Card */
.insights-summary {
    margin: 1.5rem 0;
}

.summary-card {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 12px;
    padding: 1.5rem;
    color: white;
    position: relative;
    overflow: hidden;
    display: flex;
    align-items: flex-start;
    gap: 1rem;
}

.summary-card::before {
    content: '';
    position: absolute;
    top: -50%;
    right: -50%;
    width: 100%;
    height: 100%;
    background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent);
    transform: rotate(45deg);
    animation: shimmer 3s infinite;
}

@keyframes shimmer {
    0% { transform: translateX(-100%) rotate(45deg); }
    100% { transform: translateX(200%) rotate(45deg); }
}

.summary-icon {
    font-size: 1.5rem;
    opacity: 0.9;
}

.summary-content h6 {
    font-size: 1rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    opacity: 0.9;
}

.summary-content p {
    font-size: 1.1rem;
    margin: 0;
    line-height: 1.5;
}

/* Priority Focus Card */
.priority-focus {
    margin: 1.5rem 0;
}

.priority-card {
    background: linear-gradient(135deg, #fef3c7 0%, #fcd34d 100%);
    border-radius: 12px;
    padding: 1.25rem;
    border-left: 4px solid #f59e0b;
    box-shadow: 0 4px 15px rgba(245, 158, 11, 0.2);
}

.priority-header {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.75rem;
}

.priority-icon {
    color: #f59e0b;
    font-size: 1.2rem;
}

.priority-label {
    font-weight: 600;
    color: #92400e;
    flex: 1;
}

.urgency-badge {
    background: #f59e0b;
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 600;
    animation: urgent-pulse 2s infinite;
}

@keyframes urgent-pulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.05); }
}

.priority-content p {
    color: #92400e;
    margin-bottom: 1rem;
    line-height: 1.5;
}

.priority-action-btn {
    background: #f59e0b;
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 500;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    transition: all 0.3s ease;
}

.priority-action-btn:hover {
    background: #d97706;
    transform: translateY(-1px);
    color: white;
    text-decoration: none;
}

/* Recommendations Grid */
.smart-recommendations {
    margin: 2rem 0;
}

.recommendations-header {
    font-size: 1.1rem;
    font-weight: 600;
    color: #2c3e50;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
}

.recommendations-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 1rem;
}

.recommendation-card {
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 10px;
    padding: 1rem;
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
}

.recommendation-card:hover {
    border-color: #667eea;
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.1);
    transform: translateY(-2px);
}

.rec-icon {
    width: 40px;
    height: 40px;
    background: linear-gradient(135deg, #667eea, #764ba2);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 0.9rem;
    flex-shrink: 0;
}

.rec-content {
    flex: 1;
}

.rec-text {
    font-size: 0.9rem;
    color: #374151;
    line-height: 1.5;
    margin-bottom: 0.5rem;
}

.rec-category {
    font-size: 0.75rem;
    color: #667eea;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

/* AI Sidebar Analytics */
.ai-sidebar-analytics {
    background: #f8f9fa;
    border-radius: 15px;
    padding: 1.5rem;
}

.analytics-card {
    background: white;
    border-radius: 12px;
    padding: 1.25rem;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
}

.analytics-title {
    font-size: 1rem;
    font-weight: 600;
    color: #2c3e50;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
}

.progress-metrics {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.metric-row {
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.metric-label {
    font-size: 0.85rem;
    color: #6c757d;
    font-weight: 500;
}

.metric-bar {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    flex: 1;
    margin-left: 1rem;
}

.metric-fill {
    height: 6px;
    background: linear-gradient(90deg, #667eea, #764ba2);
    border-radius: 3px;
    transition: width 1s ease;
    position: relative;
    flex: 1;
    max-width: 100px;
}

.metric-value {
    font-size: 0.8rem;
    font-weight: 600;
    color: #667eea;
    min-width: 35px;
    text-align: right;
}

.metric-number {
    font-size: 1.1rem;
    font-weight: 700;
    color: #667eea;
}

/* Upcoming Reminders */
.upcoming-reminders {
    background: white;
    border-radius: 12px;
    padding: 1.25rem;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
}

.reminders-list {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
}

.reminder-item {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    padding: 0.75rem;
    background: #f8f9fa;
    border-radius: 8px;
    transition: all 0.3s ease;
}

.reminder-item:hover {
    background: #e3f2fd;
    transform: translateX(3px);
}

.reminder-dot {
    width: 8px;
    height: 8px;
    background: #667eea;
    border-radius: 50%;
    margin-top: 4px;
    flex-shrink: 0;
}

.reminder-content {
    flex: 1;
}

.reminder-title {
    font-size: 0.85rem;
    font-weight: 600;
    color: #2c3e50;
    margin-bottom: 0.25rem;
}

.reminder-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 0.5rem;
}

.reminder-goal {
    font-size: 0.75rem;
    color: #6c757d;
    flex: 1;
}

.reminder-time {
    font-size: 0.75rem;
    color: #667eea;
    font-weight: 500;
}

.view-more-reminders {
    margin-top: 0.75rem;
    text-align: center;
}

.view-more-link {
    font-size: 0.8rem;
    color: #667eea;
    text-decoration: none;
    font-weight: 500;
}

.view-more-link:hover {
    text-decoration: underline;
    color: #5a67d8;
}

/* AI Actions */
.ai-actions {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    margin-top: 1rem;
}

.ai-action-btn {
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    border: none;
    padding: 0.75rem 1rem;
    border-radius: 8px;
    font-weight: 500;
    font-size: 0.85rem;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
}

.ai-action-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
}

.ai-action-btn.secondary {
    background: white;
    color: #667eea;
    border: 1px solid #667eea;
}

.ai-action-btn.secondary:hover {
    background: #667eea;
    color: white;
}

/* Animations */
@keyframes fade-in-up {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.fade-in-up {
    animation: fade-in-up 0.6s ease-out forwards;
}

/* Responsive Design for AI Panel */
@media (max-width: 768px) {
    .ai-insights-panel {
        padding: 1.5rem;
    }
    
    .insights-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
    }
    
    .summary-card {
        flex-direction: column;
        text-align: center;
    }
    
    .recommendations-grid {
        grid-template-columns: 1fr;
    }
    
    .priority-header {
        flex-wrap: wrap;
    }
    
    .ai-actions {
        flex-direction: row;
    }
    
    .reminder-meta {
        flex-direction: column;
        align-items: flex-start;
    }
}

/* Patterns Analysis Modal Styles */
.patterns-analysis {
    padding: 1rem 0;
}

.pattern-stat {
    text-align: center;
    padding: 1rem;
    background: linear-gradient(135deg, #f8f9ff, #ffffff);
    border-radius: 10px;
    border: 1px solid #e5e7eb;
    transition: all 0.3s ease;
}

.pattern-stat:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.1);
}

.pattern-stat .stat-number {
    font-size: 2rem;
    font-weight: 700;
    color: #667eea;
    margin-bottom: 0.5rem;
}

.pattern-stat .stat-label {
    font-size: 0.85rem;
    color: #6c757d;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 1px;
}

.category-list, .insights-list {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 1rem;
    max-height: 200px;
    overflow-y: auto;
}

.category-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem 0;
    border-bottom: 1px solid #e9ecef;
}

.category-item:last-child {
    border-bottom: none;
}

.category-name {
    font-weight: 500;
    color: #2c3e50;
}

.category-count {
    font-size: 0.85rem;
    color: #667eea;
    font-weight: 600;
}

.insight-item {
    display: flex;
    align-items: flex-start;
    padding: 0.5rem 0;
    border-bottom: 1px solid #e9ecef;
    line-height: 1.5;
}

.insight-item:last-child {
    border-bottom: none;
}

/* Weekly Plan Modal Styles */
.weekly-plan {
    padding: 1rem 0;
}

.plan-header h6 {
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    padding: 0.75rem 1.5rem;
    border-radius: 10px;
    margin: 0;
    font-weight: 600;
}

.priorities-list {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
}

.priority-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    background: linear-gradient(135deg, #fef3c7, #fcd34d);
    border-radius: 10px;
    border-left: 4px solid #f59e0b;
}

.priority-number {
    background: #f59e0b;
    color: white;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 700;
    font-size: 0.9rem;
    flex-shrink: 0;
}

.priority-content {
    flex: 1;
}

.priority-title {
    font-weight: 600;
    color: #92400e;
    margin-bottom: 0.25rem;
}

.priority-reason {
    font-size: 0.85rem;
    color: #b45309;
}

.daily-plan {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
    gap: 1rem;
    margin-top: 1rem;
}

.day-plan {
    background: white;
    border-radius: 10px;
    border: 1px solid #e5e7eb;
    overflow: hidden;
    transition: all 0.3s ease;
}

.day-plan:hover {
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    transform: translateY(-2px);
}

.day-header {
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    padding: 0.75rem 1rem;
    font-weight: 600;
    text-align: center;
    font-size: 0.9rem;
}

.day-tasks {
    padding: 1rem;
    min-height: 80px;
}

.task-item {
    display: flex;
    align-items: flex-start;
    gap: 0.5rem;
    margin-bottom: 0.75rem;
    font-size: 0.85rem;
    line-height: 1.4;
}

.task-item:last-child {
    margin-bottom: 0;
}

.task-bullet {
    color: #667eea;
    font-size: 0.5rem;
    margin-top: 0.3rem;
    flex-shrink: 0;
}

.task-item.high .task-bullet {
    color: #dc3545;
}

.task-item.medium .task-bullet {
    color: #ffc107;
}

.task-item.rest {
    color: #6c757d;
    font-style: italic;
    justify-content: center;
    text-align: center;
}

.recommendations {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 1rem;
}

.recommendation {
    display: flex;
    align-items: flex-start;
    gap: 0.5rem;
    margin-bottom: 0.75rem;
    line-height: 1.5;
}

.recommendation:last-child {
    margin-bottom: 0;
}

/* Responsive adjustments for modals */
@media (max-width: 768px) {
    .daily-plan {
        grid-template-columns: 1fr;
    }
    
    .pattern-stat .stat-number {
        font-size: 1.5rem;
    }
    
    .priority-item {
        flex-direction: column;
        text-align: center;
        gap: 0.5rem;
    }
    
    .category-item {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.25rem;
    }
 }

/* Simple Insights Panel Styles */
.simple-insights {
    background: linear-gradient(135deg, #f8f9ff 0%, #ffffff 100%);
    border-radius: 15px;
    padding: 2rem;
    border: 1px solid rgba(102, 126, 234, 0.1);
}

.insights-main {
    background: transparent;
}

.insights-header {
    border-bottom: 1px solid rgba(102, 126, 234, 0.1);
    padding-bottom: 1rem;
    margin-bottom: 1.5rem;
}

.insight-icon {
    width: 45px;
    height: 45px;
    background: linear-gradient(135deg, #667eea, #764ba2);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1.2rem;
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
}

.insights-title {
    font-size: 1.3rem;
    font-weight: 700;
    color: #2c3e50;
    margin: 0;
}

.insights-subtitle {
    font-size: 0.9rem;
    color: #6c757d;
    margin: 0;
}

.update-time {
    font-size: 0.75rem;
    color: #9ca3af;
    background: rgba(102, 126, 234, 0.1);
    padding: 0.25rem 0.75rem;
    border-radius: 12px;
}

/* Summary Card */
.insight-summary {
    margin: 1.5rem 0;
}

.summary-card {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 12px;
    padding: 1.5rem;
    color: white;
    display: flex;
    align-items: flex-start;
    gap: 1rem;
}

.summary-icon {
    font-size: 1.5rem;
    opacity: 0.9;
}

.summary-content h6 {
    font-size: 1rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    opacity: 0.9;
}

.summary-content p {
    font-size: 1.1rem;
    margin: 0;
    line-height: 1.5;
}

/* Priority Alert */
.priority-alert {
    margin: 1.5rem 0;
}

.priority-card {
    background: linear-gradient(135deg, #fef3c7 0%, #fcd34d 100%);
    border-radius: 12px;
    padding: 1.25rem;
    border-left: 4px solid #f59e0b;
    box-shadow: 0 4px 15px rgba(245, 158, 11, 0.2);
}

.priority-header {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.75rem;
}

.priority-icon {
    color: #f59e0b;
    font-size: 1.2rem;
}

.priority-label {
    font-weight: 600;
    color: #92400e;
    flex: 1;
}

.urgency-badge {
    background: #f59e0b;
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 600;
}

.urgency-badge.urgent {
    background: #dc3545;
    animation: urgent-pulse 2s infinite;
}

@keyframes urgent-pulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.05); }
}

.priority-content p {
    color: #92400e;
    margin-bottom: 1rem;
    line-height: 1.5;
}

.priority-action-btn {
    background: #f59e0b;
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 500;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    transition: all 0.3s ease;
}

.priority-action-btn:hover {
    background: #d97706;
    transform: translateY(-1px);
    color: white;
    text-decoration: none;
}

/* Recommendations Section */
.recommendations-section {
    margin: 2rem 0;
}

.recommendations-header {
    font-size: 1.1rem;
    font-weight: 600;
    color: #2c3e50;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
}

.recommendations-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 1rem;
}

.recommendation-card {
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 10px;
    padding: 1rem;
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    transition: all 0.3s ease;
}

.recommendation-card:hover {
    border-color: #667eea;
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.1);
    transform: translateY(-2px);
}

.rec-icon {
    width: 40px;
    height: 40px;
    background: linear-gradient(135deg, #667eea, #764ba2);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 0.9rem;
    flex-shrink: 0;
}

.rec-content {
    flex: 1;
}

.rec-text {
    font-size: 0.9rem;
    color: #374151;
    line-height: 1.5;
    margin-bottom: 0.5rem;
}

.rec-category {
    font-size: 0.75rem;
    color: #667eea;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

/* Insights Sidebar */
.insights-sidebar {
    background: #f8f9fa;
    border-radius: 15px;
    padding: 1.5rem;
}

.stats-card, .categories-card, .deadlines-card {
    background: white;
    border-radius: 12px;
    padding: 1.25rem;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
}

.stats-title {
    font-size: 1rem;
    font-weight: 600;
    color: #2c3e50;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
}

.stat-item {
    text-align: center;
    padding: 0.75rem;
    background: #f8f9fa;
    border-radius: 8px;
}

.stat-value {
    display: block;
    font-size: 1.5rem;
    font-weight: 700;
    color: #667eea;
    margin-bottom: 0.25rem;
}

.stat-label {
    font-size: 0.8rem;
    color: #6c757d;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

/* Categories List */
.categories-list {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.category-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem 0;
    border-bottom: 1px solid #e9ecef;
}

.category-item:last-child {
    border-bottom: none;
}

.category-name {
    font-weight: 500;
    color: #2c3e50;
}

.category-count {
    background: #667eea;
    color: white;
    padding: 0.2rem 0.6rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 600;
}

/* Deadlines List */
.deadlines-list {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
}

.deadline-item {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    padding: 0.75rem;
    background: #f8f9fa;
    border-radius: 8px;
    transition: all 0.3s ease;
}

.deadline-item:hover {
    background: #e3f2fd;
    transform: translateX(3px);
}

.deadline-dot {
    width: 8px;
    height: 8px;
    background: #667eea;
    border-radius: 50%;
    margin-top: 4px;
    flex-shrink: 0;
}

.deadline-content {
    flex: 1;
}

.deadline-title {
    font-size: 0.85rem;
    font-weight: 600;
    color: #2c3e50;
    margin-bottom: 0.25rem;
}

.deadline-time {
    font-size: 0.75rem;
    color: #667eea;
    font-weight: 500;
}

.view-more-deadlines {
    margin-top: 0.75rem;
    text-align: center;
}

.view-more-link {
    font-size: 0.8rem;
    color: #667eea;
    text-decoration: none;
    font-weight: 500;
}

.view-more-link:hover {
    text-decoration: underline;
    color: #5a67d8;
}

/* Empty and Error States */
.empty-insights, .error-insights {
    background: #f8f9fa;
    border-radius: 15px;
    padding: 2rem;
    text-align: center;
}

.empty-icon i, .error-icon i {
    opacity: 0.7;
}

.empty-title {
    color: #2c3e50;
    font-weight: 600;
    margin-bottom: 0.5rem;
}

/* Responsive Design */
@media (max-width: 768px) {
    .simple-insights {
        padding: 1.5rem;
    }
    
    .insights-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
    }
    
    .summary-card {
        flex-direction: column;
        text-align: center;
    }
    
    .recommendations-grid {
        grid-template-columns: 1fr;
    }
    
    .priority-header {
        flex-wrap: wrap;
    }
    
    .stats-grid {
        grid-template-columns: 1fr;
    }
}

/* Goal Progress Links */
.goal-progress-link {
    color: #495057 !important;
    transition: all 0.2s ease;
}

.goal-progress-link:hover {
    color: #007bff !important;
    text-decoration: underline !important;
    transform: translateX(3px);
}

/* Dashboard Achievement Cards */
.achievement-card-mini {
    transition: all 0.3s ease;
    border-radius: 12px;
    overflow: hidden;
}

.achievement-card-mini:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
}

.achievement-icon-mini {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1.2rem;
    margin: 0 auto;
}

.achievement-icon-mini-small {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1rem;
    flex-shrink: 0;
}

.achievement-icon-mini.bronze, .achievement-icon-mini-small.bronze {
    background: linear-gradient(135deg, #cd7f32, #b8691a);
}

.achievement-icon-mini.silver, .achievement-icon-mini-small.silver {
    background: linear-gradient(135deg, #c0c0c0, #a8a8a8);
}

.achievement-icon-mini.gold, .achievement-icon-mini-small.gold {
    background: linear-gradient(135deg, #ffd700, #ffb347);
}

.achievement-icon-mini.diamond, .achievement-icon-mini-small.diamond {
    background: linear-gradient(135deg, #87ceeb, #4682b4);
}

.achievement-icon-mini.legendary, .achievement-icon-mini-small.legendary {
    background: linear-gradient(135deg, #ff6b6b, #ee5a52);
    animation: mini-legendary-glow 2s infinite;
}

@keyframes mini-legendary-glow {
    0%, 100% { box-shadow: 0 0 8px rgba(255, 107, 107, 0.5); }
    50% { box-shadow: 0 0 15px rgba(255, 107, 107, 0.8); }
}

.achievement-meta-mini {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
}

.badge-bronze {
    background: rgba(205, 127, 50, 0.1);
    color: #cd7f32;
    border: 1px solid rgba(205, 127, 50, 0.3);
}

.badge-silver {
    background: rgba(192, 192, 192, 0.1);
    color: #a8a8a8;
    border: 1px solid rgba(192, 192, 192, 0.3);
}

.badge-gold {
    background: rgba(255, 215, 0, 0.1);
    color: #ffd700;
    border: 1px solid rgba(255, 215, 0, 0.3);
}

.badge-diamond {
    background: rgba(135, 206, 235, 0.1);
    color: #4682b4;
    border: 1px solid rgba(135, 206, 235, 0.3);
}

.badge-legendary {
    background: rgba(255, 107, 107, 0.1);
    color: #ff6b6b;
    border: 1px solid rgba(255, 107, 107, 0.3);
}

.achievement-summary {
    display: flex;
    align-items: center;
    justify-content: flex-end;
    gap: 0.5rem;
}

.achievement-dashboard-header {
    border-bottom: 1px solid #e9ecef;
    padding-bottom: 1rem;
}

/* Statistics Dashboard Styles */
.statistics-dashboard .stat-card {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    text-align: center;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    border: 1px solid #e9ecef;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    height: 100%;
}

.statistics-dashboard .stat-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.15);
}

.statistics-dashboard .stat-icon {
    font-size: 2rem;
    margin-bottom: 1rem;
}

.statistics-dashboard .stat-number {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    color: #2c3e50;
}

.statistics-dashboard .stat-label {
    font-size: 0.9rem;
    color: #6c757d;
    text-transform: uppercase;
    letter-spacing: 1px;
    font-weight: 500;
}

.statistics-dashboard .chart-card {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    border: 1px solid #e9ecef;
    height: 100%;
}

.statistics-dashboard .chart-title {
    font-weight: 600;
    color: #2c3e50;
    margin-bottom: 1rem;
    text-align: center;
}

.statistics-dashboard .chart-container {
    position: relative;
    height: 250px;
    width: 100%;
}

.statistics-dashboard .summary-section {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    border: 1px solid #e9ecef;
}

.statistics-dashboard .summary-section h6 {
    color: #2c3e50;
    font-weight: 600;
    margin-bottom: 1rem;
}

.statistics-dashboard .recommendations ul li {
    padding: 0.5rem 0;
    border-bottom: 1px solid #f8f9fa;
}

.statistics-dashboard .recommendations ul li:last-child {
    border-bottom: none;
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .statistics-dashboard .stat-card {
        margin-bottom: 1rem;
    }
    
    .statistics-dashboard .chart-container {
        height: 200px;
    }
    
    .statistics-dashboard .stat-number {
        font-size: 2rem;
    }
    
    .statistics-dashboard .stat-icon {
        font-size: 1.5rem;
    }
}
</style>

<!-- AI Insights Dashboard Panel (Premium) -->

<!-- AI Dashboard Integration for Premium Users -->
<% if (user && (user.subscription_plan === 'monthly' || user.subscription_plan === 'annual')) { %>
<!-- Remove all content here -->
<% } else { %>
<!-- Upgrade Banner for Non-Premium Users -->
<!-- Remove all content here -->
<% } %> 