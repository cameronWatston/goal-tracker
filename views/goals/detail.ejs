<!-- Enhanced Goal Detail Page with Social Features & Tutorial -->

<!-- Tutorial System Overlay -->
<div id="tutorialOverlay" class="tutorial-overlay d-none">
    <div class="tutorial-content">
        <div class="tutorial-header">
            <h4 id="tutorialTitle"></h4>
            <button type="button" class="btn-close tutorial-close" onclick="skipTutorial()"></button>
        </div>
        <div class="tutorial-body">
            <p id="tutorialText"></p>
            <div class="tutorial-image-container">
                <img id="tutorialImage" src="" alt="" class="tutorial-image d-none">
            </div>
        </div>
        <div class="tutorial-footer">
            <button class="btn btn-outline-secondary" onclick="skipTutorial()">Skip Tutorial</button>
            <div class="tutorial-navigation">
                <button class="btn btn-secondary" id="tutorialPrev" onclick="previousTutorialStep()">Previous</button>
                <span class="tutorial-step-indicator">
                    <span id="currentStep">1</span> of <span id="totalSteps">8</span>
                </span>
                <button class="btn btn-primary" id="tutorialNext" onclick="nextTutorialStep()">Next</button>
            </div>
        </div>
    </div>
</div>

<!-- Social Sharing Success Modal -->
<div class="modal fade" id="shareSuccessModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">ðŸŽ‰ Shared Successfully!</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center">
                <div class="mb-3">
                    <i class="fas fa-check-circle text-success fa-3x"></i>
                </div>
                <p>Your milestone achievement has been shared! Keep up the great work!</p>
                <div class="achievement-badge">
                    <div class="badge bg-warning text-dark">
                        <i class="fas fa-trophy me-1"></i> Social Achiever
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="container-fluid">
    <!-- Enhanced Header Section with Social Actions -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-lg border-0 goal-header-card">
                <div class="card-body p-4">
                    <div class="d-flex align-items-center justify-content-between">
                        <div class="goal-header-content">
                            <div class="d-flex align-items-center mb-2">
                                <div class="goal-icon-container me-3" data-tutorial="goal-overview">
                                    <div class="goal-icon bg-gradient-<%= 
                                    goal.category === 'health' ? 'success' : 
                                    goal.category === 'career' ? 'primary' : 
                                    goal.category === 'personal' ? 'info' : 
                                    goal.category === 'finance' ? 'warning' : 
                                    goal.category === 'relationships' ? 'danger' : 
                                    'secondary' %>">
                                    <i class="fas fa-<%= 
                                        goal.category === 'health' ? 'heartbeat' : 
                                        goal.category === 'career' ? 'briefcase' : 
                                        goal.category === 'personal' ? 'user' : 
                                        goal.category === 'finance' ? 'dollar-sign' : 
                                        goal.category === 'relationships' ? 'heart' : 
                                            'target' %>"></i>
                                    </div>
                                </div>
                                <div>
                                    <h2 class="mb-1 goal-title"><%= goal.title %></h2>
                                    <div class="goal-meta">
                                        <span class="badge bg-<%= 
                                            goal.category === 'health' ? 'success' : 
                                            goal.category === 'career' ? 'primary' : 
                                            goal.category === 'personal' ? 'info' : 
                                            goal.category === 'finance' ? 'warning' : 
                                            goal.category === 'relationships' ? 'danger' : 
                                            'secondary' %> me-2">
                                            <%= goal.category ? goal.category.charAt(0).toUpperCase() + goal.category.slice(1) : 'General' %>
                                </span>
                                        <span class="text-muted">
                                    <i class="fas fa-calendar-alt me-1"></i>
                                            Due: <%= new Date(goal.target_date).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }) %>
                                </span>
                                        <span class="ms-3 text-muted">
                                            <i class="fas fa-clock me-1"></i>
                                            <%= daysRemaining < 0 ? 'Overdue' : daysRemaining === 0 ? 'Due Today' : daysRemaining + ' days left' %>
                                        </span>
                        </div>
                                </div>
                            </div>
                            
                            <!-- Quick Stats Row -->
                            <div class="quick-stats-row mt-3">
                                <div class="stat-item">
                                    <div class="stat-value"><%= progressPercent %>%</div>
                                    <div class="stat-label">Complete</div>
                                </div>
                                <div class="stat-item">
                                    <div class="stat-value"><%= completedCount %></div>
                                    <div class="stat-label">Milestones Done</div>
                                </div>
                                <div class="stat-item">
                                    <div class="stat-value"><%= checkInCount %></div>
                                    <div class="stat-label">Check-ins</div>
                                </div>
                                <div class="stat-item">
                                    <div class="stat-value"><%= streakPoints %></div>
                                    <div class="stat-label">Points</div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="action-buttons" data-tutorial="action-buttons">
                            <div class="btn-group-vertical">
                                <div class="btn-group mb-2">
                                    <a href="/goals/dashboard" class="btn btn-outline-secondary">
                                        <i class="fas fa-arrow-left me-1"></i> Back
                                    </a>
                                    <button class="btn btn-info" onclick="startTutorial()">
                                        <i class="fas fa-question-circle me-1"></i> Tutorial
                                    </button>
                                </div>
                                
                                <div class="btn-group mb-2">
                                    <button class="btn btn-success" data-bs-toggle="dropdown">
                                        <i class="fas fa-share-alt me-1"></i> Share Progress
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li><a class="dropdown-item" href="#" onclick="shareToFacebook()">
                                            <i class="fab fa-facebook text-primary me-2"></i> Facebook
                                        </a></li>
                                        <li><a class="dropdown-item" href="#" onclick="shareToCommunity()">
                                            <i class="fas fa-users text-info me-2"></i> Community
                                        </a></li>
                                        <li><a class="dropdown-item" href="#" onclick="shareToTwitter()">
                                            <i class="fab fa-twitter text-info me-2"></i> Twitter
                                        </a></li>
                                        <li><a class="dropdown-item" href="#" onclick="shareToLinkedIn()">
                                            <i class="fab fa-linkedin text-primary me-2"></i> LinkedIn
                                        </a></li>
                                        <li><hr class="dropdown-divider"></li>
                                        <li><a class="dropdown-item" href="#" onclick="copyShareLink()">
                                            <i class="fas fa-link text-secondary me-2"></i> Copy Link
                                        </a></li>
                                    </ul>
                                </div>
                                
                            <a href="/goals/export/<%= goal.id %>" class="btn btn-primary">
                                <i class="fas fa-file-export me-1"></i> Export
                            </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Enhanced Progress Visualization -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm border-0" data-tutorial="progress-visualization">
                <div class="card-header bg-gradient-primary text-white">
                    <h5 class="mb-0"><i class="fas fa-chart-line me-2"></i> Progress Visualization</h5>
                </div>
                <div class="card-body p-4">
                    <!-- Circular Progress -->
                    <div class="row align-items-center">
                        <div class="col-md-4 text-center">
                            <div class="circular-progress-container">
                                <div class="circular-progress" data-progress="<%= progressPercent %>">
                                    <div class="progress-circle">
                                        <div class="progress-text">
                                            <span class="progress-percentage"><%= progressPercent %>%</span>
                                            <span class="progress-label">Complete</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
        <div class="col-md-8">
                            <!-- Milestone Progress Timeline -->
                            <div class="milestone-timeline">
                                <h6 class="mb-3">Milestone Timeline</h6>
                                <div class="timeline-container">
                                    <% milestones.forEach((milestone, index) => { %>
                                        <div class="timeline-milestone <%= milestone.status %>" 
                                             data-bs-toggle="tooltip" 
                                             title="<%= milestone.title %> - <%= milestone.status.charAt(0).toUpperCase() + milestone.status.slice(1) %>">
                                            <div class="milestone-dot">
                                                <% if (milestone.status === 'completed') { %>
                                                    <i class="fas fa-check"></i>
                                                <% } else if (milestone.status === 'in-progress') { %>
                                                    <i class="fas fa-play"></i>
                                                <% } else if (milestone.status === 'missed') { %>
                                                    <i class="fas fa-times"></i>
                                                <% } else { %>
                                                    <i class="fas fa-circle"></i>
                                                <% } %>
                                            </div>
                                            <div class="milestone-label">
                                                <%= milestone.title.length > 15 ? milestone.title.substring(0, 15) + '...' : milestone.title %>
                                            </div>
                                        </div>
                                    <% }) %>
                                </div>
                            </div>
                            
                            <!-- Achievement Badges -->
                            <div class="achievement-section mt-4">
                                <h6 class="mb-3">Achievements Unlocked</h6>
                                <div class="achievement-badges">
                                    <% if (completedCount >= 1) { %>
                                        <div class="achievement-badge earned" data-bs-toggle="tooltip" title="Complete your first milestone">
                                            <i class="fas fa-star"></i>
                                            <span>First Step</span>
                                        </div>
                                    <% } %>
                                    
                                    <% if (completedCount >= Math.floor(totalMilestones / 2)) { %>
                                        <div class="achievement-badge earned" data-bs-toggle="tooltip" title="Complete half of your milestones">
                                            <i class="fas fa-medal"></i>
                                            <span>Halfway Hero</span>
                                        </div>
                                    <% } %>
                                    
                                    <% if (checkInCount >= 5) { %>
                                        <div class="achievement-badge earned" data-bs-toggle="tooltip" title="Make 5 check-ins">
                                            <i class="fas fa-calendar-check"></i>
                                            <span>Consistent</span>
                                        </div>
                                    <% } %>
                                    
                                    <% if (progressPercent >= 75) { %>
                                        <div class="achievement-badge earned" data-bs-toggle="tooltip" title="Reach 75% completion">
                                            <i class="fas fa-trophy"></i>
                                            <span>Almost There</span>
                                        </div>
                                    <% } %>
                                    
                                    <% if (progressPercent === 100) { %>
                                        <div class="achievement-badge earned gold" data-bs-toggle="tooltip" title="Complete your goal">
                                            <i class="fas fa-crown"></i>
                                            <span>Goal Master</span>
                                        </div>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Enhanced Goal Overview with AI Insights -->
    <div class="row mb-4">
        <div class="col-md-8">
            <div class="card shadow-sm border-0" data-tutorial="goal-description">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                    <h5 class="mb-0"><i class="fas fa-info-circle me-2"></i> Goal Overview</h5>
                        <button class="btn btn-outline-primary btn-sm" onclick="generateInsights()">
                            <i class="fas fa-lightbulb me-1"></i> AI Insights
                        </button>
                    </div>
                </div>
                <div class="card-body p-4">
                    <% if (goal.description) { %>
                        <div class="goal-description">
                            <%= goal.description %>
                        </div>
                    <% } else { %>
                        <p class="text-muted fst-italic">No description provided.</p>
                    <% } %>
                    
                    <!-- AI Insights Section -->
                    <div id="aiInsightsSection" class="goal-insights-section mt-4 d-none">
                        <div class="insights-header">
                            <i class="fas fa-brain"></i>
                            <h4>AI Goal Insights</h4>
                        </div>
                        <div class="insights-content">
                            <div id="aiInsightsContent">
                                <div class="insights-loading">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Generating insights...</span>
                                    </div>
                                    <p class="mt-2 mb-0">Analyzing your goal progress...</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Enhanced Timeline -->
                    <div class="row mt-4">
                        <div class="col-md-6">
                            <div class="info-card timeline-card">
                                <div class="info-header">
                                    <i class="fas fa-calendar-alt text-primary"></i>
                                    <h6>Timeline</h6>
                                </div>
                                <div class="info-content">
                                    <div class="timeline-stat">
                                        <label>Started</label>
                                            <span><%= new Date(goal.created_at).toLocaleDateString() %></span>
                                        </div>
                                    <div class="timeline-stat">
                                        <label>Target Date</label>
                                            <span><%= new Date(goal.target_date).toLocaleDateString() %></span>
                                        </div>
                                    <div class="timeline-stat <%= daysRemaining < 0 ? 'overdue' : daysRemaining <= 7 ? 'urgent' : '' %>">
                                        <label>Status</label>
                                            <span>
                                                <% if (daysRemaining < 0) { %>
                                                <i class="fas fa-exclamation-triangle text-danger me-1"></i> 
                                                Overdue by <%= Math.abs(daysRemaining) %> days
                                                <% } else if (daysRemaining === 0) { %>
                                                <i class="fas fa-clock text-warning me-1"></i> Due today
                                                <% } else { %>
                                                <i class="fas fa-hourglass-half text-info me-1"></i> 
                                                <%= daysRemaining %> days remaining
                                                <% } %>
                                            </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="info-card progress-card">
                                <div class="info-header">
                                    <i class="fas fa-chart-line text-success"></i>
                                    <h6>Statistics</h6>
                                </div>
                                <div class="info-content">
                                    <div class="progress-stat">
                                        <div class="progress mb-2" style="height: 8px;">
                                            <div class="progress-bar bg-success" role="progressbar" 
                                                style="width: <%= progressPercent %>%;"></div>
                                    </div>
                                    <div class="d-flex justify-content-between">
                                        <span><%= progressPercent %>% Complete</span>
                                            <span><%= completedCount %> / <%= totalMilestones %> milestones</span>
                                        </div>
                                    </div>
                                    <div class="stat-badges mt-3">
                                        <span class="badge bg-primary">
                                            <i class="fas fa-flag-checkered me-1"></i>
                                            <%= milestones.length %> Milestones
                                        </span>
                                        <span class="badge bg-success">
                                            <i class="fas fa-clipboard-check me-1"></i>
                                            <%= logs ? logs.length : 0 %> Check-ins
                                        </span>
                                        <span class="badge bg-info">
                                            <i class="fas fa-sticky-note me-1"></i>
                                            <%= notes ? notes.length : 0 %> Notes
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Enhanced Action Panel -->
        <div class="col-md-4">
            <div class="card shadow-sm border-0" data-tutorial="quick-actions">
                <div class="card-header bg-gradient-info text-white">
                    <h5 class="mb-0"><i class="fas fa-bolt me-2"></i> Quick Actions</h5>
                </div>
                <div class="card-body p-4">
                    <div class="action-grid">
                        <button class="action-btn primary" data-bs-toggle="modal" data-bs-target="#addLogModal">
                            <div class="action-icon">
                                <i class="fas fa-plus-circle"></i>
                            </div>
                            <div class="action-text">
                                <span class="action-title">Add Check-in</span>
                                <span class="action-subtitle">Record progress</span>
                            </div>
                        </button>
                        
                        <button class="action-btn secondary" data-bs-toggle="modal" data-bs-target="#addNoteModal">
                            <div class="action-icon">
                                <i class="fas fa-sticky-note"></i>
                            </div>
                            <div class="action-text">
                                <span class="action-title">Add Note</span>
                                <span class="action-subtitle">Save thoughts</span>
                            </div>
                        </button>
                        
                        <button class="action-btn success" onclick="celebrateProgress()">
                            <div class="action-icon">
                                <i class="fas fa-trophy"></i>
                            </div>
                            <div class="action-text">
                                <span class="action-title">Celebrate</span>
                                <span class="action-subtitle">Mark milestone</span>
                            </div>
                        </button>
                        
                        <button class="action-btn warning" onclick="requestMotivation()">
                            <div class="action-icon">
                                <i class="fas fa-fire"></i>
                            </div>
                            <div class="action-text">
                                <span class="action-title">Get Motivated</span>
                                <span class="action-subtitle">AI coaching</span>
                            </div>
                        </button>
                        
                        <button class="action-btn info edit-goal-btn" data-goal-id="<%= goal.id %>">
                            <div class="action-icon">
                                <i class="fas fa-edit"></i>
                    </div>
                            <div class="action-text">
                                <span class="action-title">Edit Goal</span>
                                <span class="action-subtitle">Modify details</span>
                </div>
                        </button>
                        
                        <button class="action-btn danger delete-goal-btn" data-goal-id="<%= goal.id %>">
                            <div class="action-icon">
                                <i class="fas fa-trash-alt"></i>
            </div>
                            <div class="action-text">
                                <span class="action-title">Delete Goal</span>
                                <span class="action-subtitle">Remove goal</span>
                            </div>
                        </button>
                    </div>
        </div>
    </div>
    
            <!-- Motivation Quote Card -->
            <div class="card shadow-sm border-0 mt-3">
                <div class="card-body p-3 text-center motivation-card">
                    <div class="motivation-icon mb-2">
                        <i class="fas fa-quote-left text-primary"></i>
                    </div>
                    <p class="motivation-quote mb-2" id="motivationQuote">
                        "The journey of a thousand miles begins with one step."
                    </p>
                    <small class="text-muted" id="motivationAuthor">- Lao Tzu</small>
                    <button class="btn btn-link btn-sm mt-2" onclick="getNewQuote()">
                        <i class="fas fa-sync-alt me-1"></i> New Quote
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Enhanced Interactive Milestones Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm border-0" data-tutorial="milestones">
                <div class="card-header bg-gradient-success text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0"><i class="fas fa-flag-checkered me-2"></i> Interactive Milestones</h5>
                        <div class="milestone-actions">
                            <button class="btn btn-light btn-sm me-2" data-bs-toggle="modal" data-bs-target="#reconfigureMilestonesModal">
                                <i class="fas fa-sync me-1"></i> AI Reconfigure
                            </button>
                            <button class="btn btn-warning btn-sm me-2" data-bs-toggle="modal" data-bs-target="#addCustomMilestoneModal">
                                <i class="fas fa-plus me-1"></i> Add Custom
                            </button>
                            <button class="btn btn-info btn-sm" onclick="toggleMilestoneView()">
                                <i class="fas fa-th-list me-1"></i> <span id="viewToggleText">Card View</span>
                        </button>
                        </div>
                    </div>
                </div>
                <div class="card-body p-4">
                    <% if (milestones && milestones.length > 0) { %>
                        <div class="table-responsive">
                            <table class="table table-hover" id="milestones-table">
                                <thead>
                                    <tr>
                                        <th style="width: 5%">Order</th>
                                        <th style="width: 15%">Status</th>
                                        <th style="width: 35%">Milestone</th>
                                        <th style="width: 15%">Target Date</th>
                                        <th style="width: 20%">Metrics</th>
                                        <th style="width: 10%">Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="milestones-tbody">
                                    <% milestones.forEach((milestone, index) => { %>
                                        <tr data-milestone-id="<%= milestone.id %>" class="milestone-row">
                                            <td class="text-center">
                                                <div class="drag-handle" style="cursor: grab;">
                                                    <i class="fas fa-grip-vertical text-muted"></i>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="milestone-status">
                                                <% if (milestone.status === 'pending') { %>
                                                    <span class="badge bg-secondary">Pending</span>
                                                <% } else if (milestone.status === 'in-progress') { %>
                                                    <span class="badge bg-primary">In Progress</span>
                                                <% } else if (milestone.status === 'completed') { %>
                                                    <span class="badge bg-success">Completed</span>
                                                <% } else if (milestone.status === 'missed') { %>
                                                    <span class="badge bg-danger">Missed</span>
                                                <% } %>
                                                </div>
                                                <div class="progress mt-2" style="height: 5px;">
                                                    <div class="progress-bar <%= 
                                                        milestone.status === 'completed' ? 'bg-success' :
                                                        milestone.status === 'in-progress' ? 'bg-primary' :
                                                        milestone.status === 'missed' ? 'bg-danger' : 'bg-secondary'
                                                    %>" role="progressbar" style="width: <%= milestone.progress_percentage || 0 %>%"></div>
                                                </div>
                                                <input type="range" class="form-range mt-2 milestone-progress" 
                                                    value="<%= milestone.progress_percentage || 0 %>"
                                                    min="0" max="100" step="5"
                                                    onchange="updateMilestoneProgress('<%= milestone.id %>', this.value)"
                                                    data-milestone-id="<%= milestone.id %>"
                                                    <%= milestone.status === 'completed' ? 'disabled' : '' %>>
                                                <small class="text-muted d-block text-center"><%= milestone.progress_percentage || 0 %>% Complete</small>
                                            </td>
                                            <td>
                                                <strong><%= milestone.title %></strong>
                                                <% if (milestone.description) { %>
                                                    <p class="small text-muted mb-0"><%= milestone.description %></p>
                                                <% } %>
                                            </td>
                                            <td><%= new Date(milestone.target_date).toLocaleDateString() %></td>
                                            <td>
                                                <% 
                                                let metricsArray = [];
                                                try {
                                                    // Handle case where metrics might be a string
                                                    if (milestone.metrics && typeof milestone.metrics === 'string') {
                                                        try {
                                                            const parsed = JSON.parse(milestone.metrics);
                                                            // If parsed is array, use it directly
                                                            if (Array.isArray(parsed)) {
                                                                metricsArray = parsed;
                                                            } 
                                                            // If parsed is a string, wrap it in array
                                                            else if (typeof parsed === 'string') {
                                                                metricsArray = [parsed];
                                                            }
                                                            // Otherwise handle as object or other value
                                                            else {
                                                                metricsArray = [String(parsed)];
                                                            }
                                                        } catch (e) {
                                                            // If JSON parsing fails, treat as plain string
                                                            metricsArray = [milestone.metrics];
                                                        }
                                                    } else if (Array.isArray(milestone.metrics)) {
                                                        metricsArray = milestone.metrics;
                                                    } else if (milestone.metrics) {
                                                        // Handle any other data type by converting to string
                                                        metricsArray = [String(milestone.metrics)];
                                                    }
                                                } catch (e) {
                                                    // If parsing fails, leave as empty array
                                                    console.log('Error parsing metrics:', e);
                                                    metricsArray = [];
                                                }
                                                %>
                                                <% if (metricsArray && metricsArray.length > 0) { %>
                                                    <ul class="metrics-list">
                                                        <% for(let i = 0; i < metricsArray.length; i++) { 
                                                            const metric = metricsArray[i];
                                                            if (typeof metric === 'object' && metric !== null) { %>
                                                                <li class="metric-item">
                                                                    <% if (metric.name && (metric.target !== undefined || metric.value !== undefined)) { %>
                                                                        <strong><%= metric.name %>:</strong> 
                                                                        <%= metric.value !== undefined ? metric.value : metric.target %> 
                                                                        <%= metric.unit ? metric.unit : '' %>
                                                                    <% } else { %>
                                                                        <%= JSON.stringify(metric) %>
                                                                    <% } %>
                                                                </li>
                                                            <% } else { %>
                                                                <li class="metric-item"><%= metric %></li>
                                                            <% } 
                                                        } %>
                                                    </ul>
                                                <% } else { %>
                                                    <small class="text-muted">No metrics</small>
                                                <% } %>
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-secondary edit-milestone-btn" 
                                                        data-milestone-id="<%= milestone.id %>"
                                                        data-milestone-title="<%= milestone.title %>"
                                                        data-milestone-description="<%= milestone.description || '' %>"
                                                        data-milestone-target-date="<%= milestone.target_date %>"
                                                        data-milestone-status="<%= milestone.status %>"
                                                        data-milestone-progress="<%= milestone.progress_percentage || 0 %>">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    <% }) %>
                                </tbody>
                            </table>
                        </div>
                    <% } else { %>
                        <div class="text-center p-4">
                            <div class="mb-3">
                                <i class="fas fa-tasks text-secondary fa-3x"></i>
                            </div>
                            <h5>No Milestones Yet</h5>
                            <p class="text-muted">Milestones will be automatically generated when you create a goal.</p>
                        </div>
                    <% } %>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Logs and Notes Section -->
    <div class="row">
        <!-- Check-ins / Logs -->
        <div class="col-md-6 mb-4">
            <div class="card shadow-sm">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-clipboard-check me-2"></i> Check-ins</h5>
                </div>
                <div class="card-body p-4">
                    <% if (logs && logs.length > 0) { %>
                        <div class="timeline">
                            <% logs.forEach((log, index) => { %>
                                <div class="timeline-item">
                                    <div class="timeline-item-marker">
                                        <div class="timeline-item-marker-indicator bg-<%= 
                                            log.mood === 'positive' ? 'success' : 
                                            log.mood === 'negative' ? 'danger' : 
                                            'primary' %>">
                                            <i class="fas fa-<%= 
                                                log.mood === 'positive' ? 'smile' : 
                                                log.mood === 'negative' ? 'frown' : 
                                                'comment' %>"></i>
                                        </div>
                                    </div>
                                    <div class="timeline-item-content pt-0">
                                        <div class="card mb-2">
                                            <div class="card-body py-2 px-3">
                                                <p class="mb-1"><%= log.content %></p>
                                            </div>
                                        </div>
                                        <div class="text-muted small">
                                            <i class="fas fa-calendar-alt me-1"></i> 
                                            <%= new Date(log.created_at).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' }) %>
                                        </div>
                                    </div>
                                </div>
                            <% }) %>
                        </div>
                    <% } else { %>
                        <div class="text-center p-4">
                            <div class="mb-3">
                                <i class="fas fa-clipboard-check text-secondary fa-3x"></i>
                            </div>
                            <h5>No Check-ins Yet</h5>
                            <p class="text-muted">Record your progress with regular check-ins.</p>
                            <button class="btn btn-primary mt-2" data-bs-toggle="modal" data-bs-target="#addLogModal">
                                <i class="fas fa-plus-circle me-1"></i> Add Your First Check-in
                            </button>
                        </div>
                    <% } %>
                </div>
                <% if (logs && logs.length > 0) { %>
                    <div class="card-footer">
                        <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#addLogModal">
                            <i class="fas fa-plus-circle me-1"></i> Add New Check-in
                        </button>
                    </div>
                <% } %>
            </div>
        </div>
        
        <!-- Notes -->
        <div class="col-md-6 mb-4">
            <div class="card shadow-sm">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-sticky-note me-2"></i> Notes</h5>
                </div>
                <div class="card-body p-4">
                    <% if (notes && notes.length > 0) { %>
                        <div class="notes-container">
                            <% notes.forEach(note => { %>
                                <div class="card mb-3 note-card">
                                    <div class="card-header py-2 px-3 bg-light">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <h6 class="mb-0"><%= note.title %></h6>
                                            <small class="text-muted"><%= new Date(note.created_at).toLocaleDateString() %></small>
                                        </div>
                                    </div>
                                    <div class="card-body py-2 px-3">
                                        <p class="card-text mb-0"><%= note.content %></p>
                                    </div>
                                </div>
                            <% }) %>
                        </div>
                    <% } else { %>
                        <div class="text-center p-4">
                            <div class="mb-3">
                                <i class="fas fa-sticky-note text-secondary fa-3x"></i>
                            </div>
                            <h5>No Notes Yet</h5>
                            <p class="text-muted">Add notes to help you remember important information.</p>
                            <button class="btn btn-primary mt-2" data-bs-toggle="modal" data-bs-target="#addNoteModal">
                                <i class="fas fa-plus-circle me-1"></i> Add Your First Note
                            </button>
                        </div>
                    <% } %>
                </div>
                <% if (notes && notes.length > 0) { %>
                    <div class="card-footer">
                        <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#addNoteModal">
                            <i class="fas fa-plus-circle me-1"></i> Add New Note
                        </button>
                    </div>
                <% } %>
            </div>
        </div>
    </div>
</div>

<!-- Modal forms -->
<!-- Add Log/Check-in Modal -->
<div class="modal fade" id="addLogModal" tabindex="-1" aria-labelledby="addLogModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addLogModalLabel">Add Check-in</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="add-log-form">
                    <div class="mb-3">
                        <label for="logContent" class="form-label">How's your progress?</label>
                        <textarea class="form-control" id="logContent" rows="3" placeholder="Share your progress update..." required></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">How are you feeling?</label>
                        <div class="btn-group d-flex" role="group">
                            <input type="radio" class="btn-check" name="logMood" id="logMoodPositive" value="positive" autocomplete="off">
                            <label class="btn btn-outline-success" for="logMoodPositive"><i class="fas fa-smile me-1"></i> Good</label>
                            
                            <input type="radio" class="btn-check" name="logMood" id="logMoodNeutral" value="neutral" autocomplete="off" checked>
                            <label class="btn btn-outline-primary" for="logMoodNeutral"><i class="fas fa-meh me-1"></i> Neutral</label>
                            
                            <input type="radio" class="btn-check" name="logMood" id="logMoodNegative" value="negative" autocomplete="off">
                            <label class="btn btn-outline-danger" for="logMoodNegative"><i class="fas fa-frown me-1"></i> Struggling</label>
                        </div>
                    </div>
                    <!-- AI Feedback Section (hidden by default) -->
                    <div id="aiFeedbackSection" class="mb-3 mt-4 d-none">
                        <div class="card bg-light">
                            <div class="card-body">
                                <h6 class="card-title text-primary">
                                    <i class="fas fa-robot me-2"></i> AI Assistant Feedback
                                </h6>
                                
                                <p class="card-text small">
                                    I notice you're struggling with this goal. Here are some suggestions that might help:
                                </p>
                                
                                <ul class="list-unstyled mb-0 small">
                                    <li class="mb-2">
                                        <i class="fas fa-lightbulb text-warning me-2"></i> 
                                        <strong>Break it down:</strong> Consider dividing your current milestone into smaller, more manageable tasks.
                                    </li>
                                    <li class="mb-2">
                                        <i class="fas fa-users text-info me-2"></i> 
                                        <strong>Find support:</strong> Share your challenges with a friend or family member who can help keep you accountable.
                                    </li>
                                    <li class="mb-2">
                                        <i class="fas fa-clock text-success me-2"></i> 
                                        <strong>Adjust timeline:</strong> If needed, consider adjusting your deadline to make it more realistic.
                                    </li>
                                    <li>
                                        <i class="fas fa-chart-line text-danger me-2"></i> 
                                        <strong>Review progress:</strong> Look back at how far you've already come - sometimes seeing progress can provide new motivation.
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="save-log-btn">Save Check-in</button>
            </div>
        </div>
    </div>
</div>

<!-- Add Note Modal -->
<div class="modal fade" id="addNoteModal" tabindex="-1" aria-labelledby="addNoteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addNoteModalLabel">Add Note</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="add-note-form">
                    <div class="mb-3">
                        <label for="noteTitle" class="form-label">Title</label>
                        <input type="text" class="form-control" id="noteTitle" placeholder="Note title">
                    </div>
                    <div class="mb-3">
                        <label for="noteContent" class="form-label">Content</label>
                        <textarea class="form-control" id="noteContent" rows="4" placeholder="Write your note here..." required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="save-note-btn">Save Note</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Milestone Modal -->
<div class="modal fade" id="editMilestoneModal" tabindex="-1" aria-labelledby="editMilestoneModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editMilestoneModalLabel">Update Milestone</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="edit-milestone-form">
                    <input type="hidden" id="editMilestoneId">
                    <div class="mb-3">
                        <label for="editMilestoneTitle" class="form-label">Title</label>
                        <input type="text" class="form-control" id="editMilestoneTitle" required>
                    </div>
                    <div class="mb-3">
                        <label for="editMilestoneDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="editMilestoneDescription" rows="2"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="editMilestoneDate" class="form-label">Target Date</label>
                        <input type="date" class="form-control" id="editMilestoneDate" required>
                    </div>
                    <div class="mb-3">
                        <label for="editMilestoneStatus" class="form-label">Status</label>
                        <select class="form-select" id="editMilestoneStatus" required>
                            <option value="pending">Pending</option>
                            <option value="in-progress">In Progress</option>
                            <option value="completed">Completed</option>
                            <option value="missed">Missed</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="update-milestone-btn">Update Milestone</button>
            </div>
        </div>
    </div>
</div>

<!-- Add Custom Milestone Modal -->
<div class="modal fade" id="addCustomMilestoneModal" tabindex="-1" aria-labelledby="addCustomMilestoneModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addCustomMilestoneModalLabel">Add Custom Milestone</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="add-custom-milestone-form">
                    <div class="mb-3">
                        <label for="customMilestoneText" class="form-label">What would you like to achieve?</label>
                        <textarea class="form-control" id="customMilestoneText" rows="3" 
                          placeholder="Describe a specific milestone to add to your goal (e.g., 'Learn to play basic chords on guitar')" required></textarea>
                        <div class="form-text">Be specific about what you want to accomplish as part of your goal.</div>
                    </div>
                    <div class="mb-3">
                        <label for="customMilestoneDate" class="form-label">Target Date</label>
                        <input type="date" class="form-control" id="customMilestoneDate" required>
                    </div>
                    
                    <!-- Loading indicator (hidden by default) -->
                    <div id="milestone-loading-indicator" class="text-center p-3 d-none">
                        <div class="spinner-border text-primary mb-2" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mb-0">Creating your custom milestone...</p>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="create-milestone-btn">Create Milestone</button>
            </div>
        </div>
    </div>
</div>

<!-- Reconfigure Milestones Modal -->
<div class="modal fade" id="reconfigureMilestonesModal" tabindex="-1" aria-labelledby="reconfigureMilestonesModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="reconfigureMilestonesModalLabel">Reconfigure Milestones with AI</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    <strong>Generate New Milestones:</strong> Describe how you'd like to approach your goal differently and our AI will create new milestones for you.
                </div>
                
                <form id="reconfigure-milestones-form">
                    <div class="mb-3">
                        <label for="reconfigurePrompt" class="form-label">How would you like to approach your goal?</label>
                        <textarea class="form-control" id="reconfigurePrompt" rows="4" 
                          placeholder="Examples:
â€¢ 'Focus more on practical exercises rather than theory'
â€¢ 'Break it down into smaller daily tasks'
â€¢ 'Include more social or group activities'
â€¢ 'Emphasize building foundational skills first'
â€¢ 'Make it more project-based with deadlines'" required></textarea>
                        <div class="form-text">Be specific about your preferred learning style, pace, or focus areas.</div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <label for="reconfigureStartDate" class="form-label">Start Date</label>
                            <input type="date" class="form-control" id="reconfigureStartDate" required>
                        </div>
                        <div class="col-md-6">
                            <label for="reconfigureEndDate" class="form-label">Target Date</label>
                            <input type="date" class="form-control" id="reconfigureEndDate" required>
                        </div>
                    </div>
                    
                    <div class="mt-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="replaceExistingMilestones" checked>
                            <label class="form-check-label" for="replaceExistingMilestones">
                                Replace existing milestones (unchecked will add to existing ones)
                            </label>
                        </div>
                    </div>
                    
                    <!-- Loading indicator (hidden by default) -->
                    <div id="reconfigure-loading-indicator" class="text-center p-3 d-none">
                        <div class="spinner-border text-primary mb-2" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mb-0">AI is generating your new milestones...</p>
                        <small class="text-muted">This may take a few seconds</small>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="reconfigure-milestones-btn">
                    <i class="fas fa-magic me-1"></i> Generate New Milestones
                </button>
            </div>
        </div>
    </div>
</div>

<!-- JavaScript for Goal Detail Page -->
<!-- SortableJS for drag and drop -->
<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize milestone drag and drop
    const milestoneTbody = document.getElementById('milestones-tbody');
    if (milestoneTbody) {
        const sortable = Sortable.create(milestoneTbody, {
            handle: '.drag-handle',
            animation: 150,
            ghostClass: 'sortable-ghost',
            chosenClass: 'sortable-chosen',
            dragClass: 'sortable-drag',
            onEnd: function(evt) {
                // Get the new order of milestones
                const milestoneOrder = [];
                const rows = milestoneTbody.querySelectorAll('.milestone-row');
                
                rows.forEach((row, index) => {
                    const milestoneId = row.getAttribute('data-milestone-id');
                    milestoneOrder.push({
                        id: milestoneId,
                        order: index + 1
                    });
                });
                
                // Send the new order to the server
                fetch('/api/goals/<%= goal.id %>/reorder-milestones', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        milestoneOrder: milestoneOrder
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to update milestone order');
                    }
                    return response.json();
                })
                .then(data => {
                    // Show success message
                    showSuccessMessage('Milestone order updated successfully!');
                })
                .catch(error => {
                    console.error('Error updating milestone order:', error);
                    // Revert the change by refreshing the page
                    window.location.reload();
                });
            }
        });
    }
    
    // Function to show success message
    function showSuccessMessage(message) {
        // Create a temporary success alert
        const alert = document.createElement('div');
        alert.className = 'alert alert-success alert-dismissible fade show position-fixed';
        alert.style.cssText = 'top: 20px; right: 20px; z-index: 9999; max-width: 300px;';
        alert.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        `;
        
        document.body.appendChild(alert);
        
        // Auto-remove after 3 seconds
        setTimeout(() => {
            if (alert.parentNode) {
                alert.parentNode.removeChild(alert);
            }
        }, 3000);
    }
    
    // Set progress bar widths
    document.querySelectorAll('.progress-value-bar').forEach(bar => {
        const progress = bar.getAttribute('data-progress');
        bar.style.width = progress + '%';
    });
    
    // AI Feedback for struggling users
    const moodInputs = document.querySelectorAll('input[name="logMood"]');
    const aiFeedbackSection = document.getElementById('aiFeedbackSection');
    
    moodInputs.forEach(input => {
        input.addEventListener('change', function() {
            if (this.value === 'negative') {
                aiFeedbackSection.classList.remove('d-none');
            } else {
                aiFeedbackSection.classList.add('d-none');
            }
        });
    });
    
    // Save log/check-in
    document.getElementById('save-log-btn').addEventListener('click', function() {
        const content = document.getElementById('logContent').value;
        const mood = document.querySelector('input[name="logMood"]:checked').value;
        
        if (!content) {
            alert('Please enter your check-in content');
            return;
        }
        
        // Send request to create log
        fetch('/api/goals/<%= goal.id %>/logs', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                content,
                mood
            })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            // Close modal and refresh page
            const modal = bootstrap.Modal.getInstance(document.getElementById('addLogModal'));
            modal.hide();
            window.location.reload();
        })
        .catch(error => {
            console.error('Error creating log:', error);
            alert('Failed to save check-in. Please try again.');
        });
    });
    
    // Save note
    document.getElementById('save-note-btn').addEventListener('click', function() {
        const title = document.getElementById('noteTitle').value || 'Untitled Note';
        const content = document.getElementById('noteContent').value;
        
        if (!content) {
            alert('Please enter your note content');
            return;
        }
        
        // Send request to create note
        fetch('/api/goals/<%= goal.id %>/notes', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                title,
                content
            })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            // Close modal and refresh page
            const modal = bootstrap.Modal.getInstance(document.getElementById('addNoteModal'));
            modal.hide();
            window.location.reload();
        })
        .catch(error => {
            console.error('Error creating note:', error);
            alert('Failed to save note. Please try again.');
        });
    });
    
    // Edit milestone
    document.querySelectorAll('.edit-milestone-btn').forEach(button => {
        button.addEventListener('click', function() {
            const milestoneId = this.getAttribute('data-milestone-id');
            const title = this.getAttribute('data-milestone-title');
            const description = this.getAttribute('data-milestone-description');
            const targetDate = this.getAttribute('data-milestone-target-date');
            const status = this.getAttribute('data-milestone-status');
            
            document.getElementById('editMilestoneId').value = milestoneId;
            document.getElementById('editMilestoneTitle').value = title;
            document.getElementById('editMilestoneDescription').value = description;
            document.getElementById('editMilestoneDate').value = targetDate;
            document.getElementById('editMilestoneStatus').value = status;
            
            const modal = new bootstrap.Modal(document.getElementById('editMilestoneModal'));
            modal.show();
        });
    });
    
    // Update milestone
    document.getElementById('update-milestone-btn').addEventListener('click', function() {
        const milestoneId = document.getElementById('editMilestoneId').value;
        const title = document.getElementById('editMilestoneTitle').value;
        const description = document.getElementById('editMilestoneDescription').value;
        const targetDate = document.getElementById('editMilestoneDate').value;
        const status = document.getElementById('editMilestoneStatus').value;
        
        if (!title || !targetDate) {
            alert('Please fill in all required fields');
            return;
        }
        
        // Send request to update milestone
        fetch('/api/goals/milestone/' + milestoneId, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                title,
                description,
                targetDate,
                status
            })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            // Close modal and refresh page
            const modal = bootstrap.Modal.getInstance(document.getElementById('editMilestoneModal'));
            modal.hide();
            window.location.reload();
        })
        .catch(error => {
            console.error('Error updating milestone:', error);
            alert('Failed to update milestone. Please try again.');
        });
    });
    
    // Handle edit goal button
    document.querySelector('.edit-goal-btn').addEventListener('click', function() {
        const goalId = this.getAttribute('data-goal-id');
        
        // Redirect to edit goal page or open modal
        // Assuming you want to reuse the edit modal from dashboard
        // You'd need to fetch the goal data and populate the form
        
        fetch('/api/goals/<%= goal.id %>')
            .then(response => response.json())
            .then(goal => {
                // Redirect to dashboard with edit modal open
                window.location.href = `/goals/dashboard?edit=${goal.id}`;
            })
            .catch(error => console.error('Error fetching goal data:', error));
    });
    
    // Handle delete goal button
    document.querySelector('.delete-goal-btn').addEventListener('click', function() {
        const goalId = this.getAttribute('data-goal-id');
        
        if (confirm('Are you sure you want to delete this goal? This action cannot be undone.')) {
            // Send request to delete goal
            fetch('/api/goals/' + goalId, {
                method: 'DELETE',
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                // Redirect to dashboard
                window.location.href = '/goals/dashboard';
            })
            .catch(error => {
                console.error('Error deleting goal:', error);
                alert('Failed to delete goal. Please try again.');
            });
        }
    });

    // Custom milestone creation
    const createMilestoneBtn = document.getElementById('create-milestone-btn');
    if (createMilestoneBtn) {
        createMilestoneBtn.addEventListener('click', function() {
            const milestoneText = document.getElementById('customMilestoneText').value;
            const milestoneDate = document.getElementById('customMilestoneDate').value;
            const goalId = '<%= goal.id %>';
            
            if (!milestoneText || !milestoneDate) {
                alert('Please provide both a description and target date for your milestone');
                return;
            }
            
            // Show loading indicator
            document.getElementById('milestone-loading-indicator').classList.remove('d-none');
            createMilestoneBtn.disabled = true;
            
            // Call API to generate and add the milestone
            fetch(`/api/goals/${goalId}/custom-milestone`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    description: milestoneText,
                    targetDate: milestoneDate
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                // Hide loading indicator
                document.getElementById('milestone-loading-indicator').classList.add('d-none');
                createMilestoneBtn.disabled = false;
                
                // Close the modal and reload the page to show the new milestone
                const modal = bootstrap.Modal.getInstance(document.getElementById('addCustomMilestoneModal'));
                modal.hide();
                window.location.reload();
            })
            .catch(error => {
                // Hide loading indicator on error
                document.getElementById('milestone-loading-indicator').classList.add('d-none');
                createMilestoneBtn.disabled = false;
                
                console.error('Error creating milestone:', error);
                alert('Failed to create milestone. Please try again.');
            });
        });
    }
    
    // Reconfigure milestones functionality
    const reconfigureMilestonesBtn = document.getElementById('reconfigure-milestones-btn');
    if (reconfigureMilestonesBtn) {
        // Set default dates when modal opens
        document.getElementById('reconfigureMilestonesModal').addEventListener('show.bs.modal', function() {
            const today = new Date().toISOString().split('T')[0];
            const goalTargetDate = '<%= goal.target_date %>';
            
            document.getElementById('reconfigureStartDate').value = today;
            document.getElementById('reconfigureEndDate').value = goalTargetDate;
        });
        
        reconfigureMilestonesBtn.addEventListener('click', function() {
            const prompt = document.getElementById('reconfigurePrompt').value;
            const startDate = document.getElementById('reconfigureStartDate').value;
            const endDate = document.getElementById('reconfigureEndDate').value;
            const replaceExisting = document.getElementById('replaceExistingMilestones').checked;
            const goalId = '<%= goal.id %>';
            
            if (!prompt || !startDate || !endDate) {
                alert('Please fill in all required fields');
                return;
            }
            
            if (new Date(startDate) >= new Date(endDate)) {
                alert('Start date must be before end date');
                return;
            }
            
            // Show loading indicator
            document.getElementById('reconfigure-loading-indicator').classList.remove('d-none');
            reconfigureMilestonesBtn.disabled = true;
            reconfigureMilestonesBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i> Generating...';
            
            // Call API to reconfigure milestones
            fetch(`/api/goals/${goalId}/reconfigure-milestones`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    prompt: prompt,
                    startDate: startDate,
                    endDate: endDate,
                    replaceExisting: replaceExisting
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                // Hide loading indicator
                document.getElementById('reconfigure-loading-indicator').classList.add('d-none');
                reconfigureMilestonesBtn.disabled = false;
                reconfigureMilestonesBtn.innerHTML = '<i class="fas fa-magic me-1"></i> Generate New Milestones';
                
                // Close the modal and reload the page to show the new milestones
                const modal = bootstrap.Modal.getInstance(document.getElementById('reconfigureMilestonesModal'));
                modal.hide();
                
                // Show success message and reload
                showSuccessMessage('New milestones generated successfully!');
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
            })
            .catch(error => {
                // Hide loading indicator on error
                document.getElementById('reconfigure-loading-indicator').classList.add('d-none');
                reconfigureMilestonesBtn.disabled = false;
                reconfigureMilestonesBtn.innerHTML = '<i class="fas fa-magic me-1"></i> Generate New Milestones';
                
                console.error('Error reconfiguring milestones:', error);
                alert('Failed to generate new milestones. Please try again.');
            });
        });
    }
    
    // ======================== ENHANCED FEATURES ========================
    
    // Initialize Enhanced Features
    initializeEnhancedFeatures();
    
    function initializeEnhancedFeatures() {
        // Initialize tooltips
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
        
        // Initialize circular progress
        initializeCircularProgress();
        
        // Initialize achievement animations
        animateAchievements();
        
        // Load motivation quote
        loadMotivationQuote();
        
        // Check if user wants tutorial
        checkTutorialStatus();
    }
});

// ======================== TUTORIAL SYSTEM ========================
const tutorialSteps = [
    {
        title: "Welcome to Your Goal Details!",
        text: "This is your comprehensive goal tracking page. Let me show you around all the amazing features!",
        target: "[data-tutorial='goal-overview']",
        position: "bottom"
    },
    {
        title: "Progress Visualization",
        text: "Here you can see your progress with a beautiful circular chart, milestone timeline, and achievement badges. Track your journey visually!",
        target: "[data-tutorial='progress-visualization']",
        position: "top"
    },
    {
        title: "Goal Description & AI Insights",
        text: "Read your goal description and click 'AI Insights' to get personalized suggestions and motivation from our AI assistant.",
        target: "[data-tutorial='goal-description']",
        position: "right"
    },
    {
        title: "Quick Actions",
        text: "Use these action buttons to quickly add check-ins, notes, celebrate milestones, get motivation, edit or delete your goal.",
        target: "[data-tutorial='quick-actions']",
        position: "left"
    },
    {
        title: "Interactive Milestones",
        text: "Manage your milestones here. You can drag to reorder, add custom milestones, or let AI reconfigure them for you!",
        target: "[data-tutorial='milestones']",
        position: "top"
    },
    {
        title: "Action Buttons",
        text: "These buttons let you start the tutorial, share your progress on social media, and navigate back to your dashboard.",
        target: "[data-tutorial='action-buttons']",
        position: "left"
    },
    {
        title: "Social Sharing",
        text: "Share your achievements on Facebook, Twitter, LinkedIn, or with our community to get support and motivation!",
        target: ".btn-success[data-bs-toggle='dropdown']",
        position: "bottom"
    },
    {
        title: "You're All Set!",
        text: "That's all! You now know how to use all the features. Start tracking your progress and achieving your goals!",
        target: ".goal-header-card",
        position: "bottom"
    }
];

let currentTutorialStep = 0;
let tutorialActive = false;

function startTutorial() {
    tutorialActive = true;
    currentTutorialStep = 0;
    showTutorialStep(currentTutorialStep);
    document.getElementById('tutorialOverlay').classList.remove('d-none');
}

function showTutorialStep(step) {
    if (step >= tutorialSteps.length) {
        skipTutorial();
        return;
    }
    
    const tutorialStep = tutorialSteps[step];
    
    // Update tutorial content
    document.getElementById('tutorialTitle').textContent = tutorialStep.title;
    document.getElementById('tutorialText').textContent = tutorialStep.text;
    document.getElementById('currentStep').textContent = step + 1;
    document.getElementById('totalSteps').textContent = tutorialSteps.length;
    
    // Update navigation buttons
    document.getElementById('tutorialPrev').style.display = step === 0 ? 'none' : 'inline-block';
    document.getElementById('tutorialNext').textContent = step === tutorialSteps.length - 1 ? 'Finish' : 'Next';
    
    // Highlight target element
    highlightTutorialTarget(tutorialStep.target);
}

function highlightTutorialTarget(target) {
    // Remove previous highlights
    document.querySelectorAll('.tutorial-highlight').forEach(el => {
        el.classList.remove('tutorial-highlight');
    });
    
    // Add highlight to current target
    const targetElement = document.querySelector(target);
    if (targetElement) {
        targetElement.classList.add('tutorial-highlight');
        targetElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
}

function nextTutorialStep() {
    if (currentTutorialStep < tutorialSteps.length - 1) {
        currentTutorialStep++;
        showTutorialStep(currentTutorialStep);
    } else {
        skipTutorial();
    }
}

function previousTutorialStep() {
    if (currentTutorialStep > 0) {
        currentTutorialStep--;
        showTutorialStep(currentTutorialStep);
    }
}

function skipTutorial() {
    tutorialActive = false;
    document.getElementById('tutorialOverlay').classList.add('d-none');
    document.querySelectorAll('.tutorial-highlight').forEach(el => {
        el.classList.remove('tutorial-highlight');
    });
    // Save that user has seen tutorial
    localStorage.setItem('goalDetailTutorialSeen', 'true');
}

function checkTutorialStatus() {
    // Check if this is user's first time on goal details
    const tutorialSeen = localStorage.getItem('goalDetailTutorialSeen');
    if (!tutorialSeen) {
        // Show tutorial offer
        setTimeout(() => {
            if (confirm('Would you like a quick tour of the goal details page to see all the features?')) {
                startTutorial();
            } else {
                localStorage.setItem('goalDetailTutorialSeen', 'true');
            }
        }, 2000);
    }
}

// ======================== SOCIAL SHARING FUNCTIONS ========================
function shareToFacebook() {
    const goalTitle = '<%= goal.title %>';
    const progressPercent = '<%= progressPercent %>';
    const url = window.location.href;
    const text = `I'm making great progress on my goal "${goalTitle}"! I'm ${progressPercent}% complete. Check out my journey!`;
    
    const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}&quote=${encodeURIComponent(text)}`;
    window.open(facebookUrl, '_blank', 'width=600,height=400');
    
    showShareSuccess();
}

function shareToTwitter() {
    const goalTitle = '<%= goal.title %>';
    const progressPercent = '<%= progressPercent %>';
    const url = window.location.href;
    const text = `ðŸŽ¯ Making progress on "${goalTitle}"! ${progressPercent}% complete! ðŸ’ª #GoalAchievement #Progress`;
    
    const twitterUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(url)}`;
    window.open(twitterUrl, '_blank', 'width=600,height=400');
    
    showShareSuccess();
}

function shareToLinkedIn() {
    const goalTitle = '<%= goal.title %>';
    const progressPercent = '<%= progressPercent %>';
    const url = window.location.href;
    const text = `Excited to share my progress on "${goalTitle}" - ${progressPercent}% complete! Setting and tracking goals has been a game-changer for my personal growth.`;
    
    const linkedInUrl = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(url)}&summary=${encodeURIComponent(text)}`;
    window.open(linkedInUrl, '_blank', 'width=600,height=400');
    
    showShareSuccess();
}

function shareToCommunity() {
    // Navigate to community page with pre-filled share data
    const goalTitle = '<%= goal.title %>';
    const progressPercent = '<%= progressPercent %>';
    const shareData = {
        type: 'goal_progress',
        goalTitle: goalTitle,
        progress: progressPercent,
        goalId: '<%= goal.id %>'
    };
    
    window.location.href = `/community?share=${encodeURIComponent(JSON.stringify(shareData))}`;
}

function copyShareLink() {
    const url = window.location.href;
    
    if (navigator.clipboard) {
        navigator.clipboard.writeText(url).then(() => {
            showSuccessMessage('Link copied to clipboard!');
        });
    } else {
        // Fallback for older browsers
        const textArea = document.createElement('textarea');
        textArea.value = url;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        showSuccessMessage('Link copied to clipboard!');
    }
}

function showShareSuccess() {
    const modal = new bootstrap.Modal(document.getElementById('shareSuccessModal'));
    modal.show();
}

// ======================== ENHANCED ACTION FUNCTIONS ========================
function celebrateProgress() {
    // Create celebration animation
    const celebration = document.createElement('div');
    celebration.className = 'celebration-animation';
    celebration.innerHTML = `
        <div class="confetti">ðŸŽ‰ðŸŽŠâœ¨ðŸŒŸ</div>
        <div class="celebration-message">
            <h3>Great Job!</h3>
            <p>Keep up the amazing work on your goal!</p>
        </div>
    `;
    
    document.body.appendChild(celebration);
    
    // Remove celebration after animation
    setTimeout(() => {
        document.body.removeChild(celebration);
    }, 3000);
    
    // Show success message
    showSuccessMessage('Celebration time! You\'re doing great! ðŸŽ‰');
}

async function requestMotivation() {
    try {
        const response = await fetch('/api/ai/motivation', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                goalId: '<%= goal.id %>'
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showMotivationalMessage(data.message);
        } else {
            throw new Error(data.error || 'Failed to get motivation');
        }
    } catch (error) {
        console.error('Error getting motivation:', error);
        // Fallback to local messages
        const fallbackMessages = [
            "ðŸŒŸ You've got this! Every step forward is progress worth celebrating.",
            "ðŸ’ª Remember why you started. Your future self will thank you for not giving up.",
            "ðŸš€ Progress isn't always about speed, it's about consistency. Keep going!"
        ];
        const randomMessage = fallbackMessages[Math.floor(Math.random() * fallbackMessages.length)];
        showMotivationalMessage(randomMessage);
    }
}

function showMotivationalMessage(message) {
    const alert = document.createElement('div');
    alert.className = 'alert alert-success alert-dismissible fade show position-fixed motivational-alert';
    alert.style.cssText = 'top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 9999; max-width: 400px; text-align: center; box-shadow: 0 10px 30px rgba(0,0,0,0.3);';
    alert.innerHTML = `
        <div class="mb-2">
            <i class="fas fa-heart text-danger fa-2x"></i>
        </div>
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;
    
    document.body.appendChild(alert);
    
    // Auto-remove after 5 seconds
    setTimeout(() => {
        if (alert.parentNode) {
            alert.parentNode.removeChild(alert);
        }
    }, 5000);
}

async function generateInsights() {
    const aiInsightsSection = document.getElementById('aiInsightsSection');
    const aiInsightsContent = document.getElementById('aiInsightsContent');
    
    // Show the section with loading
    aiInsightsSection.classList.remove('d-none');
    
    try {
        const response = await fetch(`/api/ai/insights?goalId=<%= goal.id %>`);
        const data = await response.json();
        
        if (data.success) {
            aiInsightsContent.innerHTML = `
                <div class="insight-card">
                    <p class="insight-text">
                        <span class="insight-icon">ðŸ§ </span>
                        ${data.data.insight}
                    </p>
                </div>
                
                <div class="recommendation-card">
                    <p class="recommendation-text">
                        <span class="recommendation-icon">ðŸ’¡</span>
                        ${data.data.recommendation}
                    </p>
                </div>
                
                <div class="mt-3 text-center">
                    <small class="text-muted">
                        <i class="fas fa-chart-line me-1"></i> 
                        Based on ${data.data.completedMilestones}/${data.data.totalMilestones} milestones completed
                    </small>
                </div>
            `;
        } else {
            throw new Error(data.error || 'Failed to generate insights');
        }
    } catch (error) {
        console.error('Error generating insights:', error);
        aiInsightsContent.innerHTML = `
            <div class="insights-error">
                <i class="fas fa-exclamation-triangle"></i>
                <p class="mb-0">Unable to generate AI insights at the moment. Please try again later.</p>
            </div>
        `;
    }
}

function generatePersonalizedInsights(progress, completed, total, daysLeft) {
    let insights = '<ul class="list-unstyled mb-0">';
    
    // Progress-based insights
    if (progress >= 75) {
        insights += `
            <li class="mb-2">
                <i class="fas fa-trophy text-warning me-2"></i>
                <strong>Excellent Progress!</strong> You're in the final stretch. Maintain your momentum to achieve your goal.
            </li>
        `;
    } else if (progress >= 50) {
        insights += `
            <li class="mb-2">
                <i class="fas fa-chart-line text-success me-2"></i>
                <strong>Halfway There!</strong> You've crossed the halfway mark. Focus on consistency to reach your goal.
            </li>
        `;
    } else if (progress >= 25) {
        insights += `
            <li class="mb-2">
                <i class="fas fa-seedling text-info me-2"></i>
                <strong>Building Momentum!</strong> You're making steady progress. Consider breaking down remaining tasks into smaller steps.
            </li>
        `;
    } else {
        insights += `
            <li class="mb-2">
                <i class="fas fa-rocket text-primary me-2"></i>
                <strong>Getting Started!</strong> Every journey begins with a single step. Focus on completing your first few milestones.
            </li>
        `;
    }
    
    // Time-based insights
    if (daysLeft < 0) {
        insights += `
            <li class="mb-2">
                <i class="fas fa-clock text-danger me-2"></i>
                <strong>Deadline Passed:</strong> Consider extending your timeline or adjusting your goal scope for better success.
            </li>
        `;
    } else if (daysLeft <= 7) {
        insights += `
            <li class="mb-2">
                <i class="fas fa-fire text-warning me-2"></i>
                <strong>Final Sprint:</strong> You're in the final week! Focus on your most important remaining tasks.
            </li>
        `;
    } else if (daysLeft <= 30) {
        insights += `
            <li class="mb-2">
                <i class="fas fa-calendar-check text-info me-2"></i>
                <strong>Final Month:</strong> Plan your remaining milestones carefully to finish strong.
            </li>
        `;
    }
    
    // Milestone-based insights
    const completionRate = (completed / total) * 100;
    if (completionRate > progress) {
        insights += `
            <li class="mb-2">
                <i class="fas fa-star text-success me-2"></i>
                <strong>Milestone Master!</strong> You're completing milestones faster than expected. Great job!
            </li>
        `;
    }
    
    insights += '</ul>';
    return insights;
}

// ======================== ENHANCED UI FUNCTIONS ========================
function initializeCircularProgress() {
    const progressElement = document.querySelector('.circular-progress');
    if (progressElement) {
        const progress = parseInt(progressElement.getAttribute('data-progress'));
        animateCircularProgress(progressElement, progress);
    }
}

function animateCircularProgress(element, targetProgress) {
    const circle = element.querySelector('.progress-circle');
    if (!circle) return;
    
    // Create SVG circle if it doesn't exist
    if (!element.querySelector('svg')) {
        const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        svg.setAttribute('width', '120');
        svg.setAttribute('height', '120');
        svg.style.position = 'absolute';
        svg.style.top = '0';
        svg.style.left = '0';
        
        const bgCircle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
        bgCircle.setAttribute('cx', '60');
        bgCircle.setAttribute('cy', '60');
        bgCircle.setAttribute('r', '54');
        bgCircle.setAttribute('fill', 'none');
        bgCircle.setAttribute('stroke', '#e9ecef');
        bgCircle.setAttribute('stroke-width', '12');
        
        const progressCircle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
        progressCircle.setAttribute('cx', '60');
        progressCircle.setAttribute('cy', '60');
        progressCircle.setAttribute('r', '54');
        progressCircle.setAttribute('fill', 'none');
        progressCircle.setAttribute('stroke', '#28a745');
        progressCircle.setAttribute('stroke-width', '12');
        progressCircle.setAttribute('stroke-linecap', 'round');
        progressCircle.setAttribute('stroke-dasharray', '339.29');
        progressCircle.setAttribute('stroke-dashoffset', '339.29');
        progressCircle.style.transform = 'rotate(-90deg)';
        progressCircle.style.transformOrigin = '60px 60px';
        progressCircle.style.transition = 'stroke-dashoffset 2s ease-in-out';
        
        svg.appendChild(bgCircle);
        svg.appendChild(progressCircle);
        element.insertBefore(svg, circle);
        
        // Animate the progress
        setTimeout(() => {
            const circumference = 2 * Math.PI * 54;
            const offset = circumference - (targetProgress / 100) * circumference;
            progressCircle.setAttribute('stroke-dashoffset', offset.toString());
        }, 100);
    }
}

function animateAchievements() {
    const badges = document.querySelectorAll('.achievement-badge.earned');
    badges.forEach((badge, index) => {
        setTimeout(() => {
            badge.style.animation = 'achievementPop 0.6s ease-out';
        }, index * 200);
    });
}

function loadMotivationQuote() {
    const quotes = [
        { text: "The journey of a thousand miles begins with one step.", author: "Lao Tzu" },
        { text: "Success is not final, failure is not fatal: it is the courage to continue that counts.", author: "Winston Churchill" },
        { text: "The only impossible journey is the one you never begin.", author: "Tony Robbins" },
        { text: "Don't watch the clock; do what it does. Keep going.", author: "Sam Levenson" },
        { text: "The future belongs to those who believe in the beauty of their dreams.", author: "Eleanor Roosevelt" },
        { text: "It is during our darkest moments that we must focus to see the light.", author: "Aristotle" },
        { text: "Success is not how high you have climbed, but how you make a positive difference to the world.", author: "Roy T. Bennett" },
        { text: "The only way to do great work is to love what you do.", author: "Steve Jobs" }
    ];
    
    const randomQuote = quotes[Math.floor(Math.random() * quotes.length)];
    document.getElementById('motivationQuote').textContent = `"${randomQuote.text}"`;
    document.getElementById('motivationAuthor').textContent = `- ${randomQuote.author}`;
}

async function getNewQuote() {
    try {
        const response = await fetch('/api/motivation/quote');
        const data = await response.json();
        
        if (data.success) {
            document.getElementById('motivationQuote').textContent = `"${data.quote}"`;
            document.getElementById('motivationAuthor').textContent = `- ${data.author}`;
            showSuccessMessage('New quote loaded! ðŸ“–');
        } else {
            throw new Error(data.error || 'Failed to get quote');
        }
    } catch (error) {
        console.error('Error getting new quote:', error);
        // Fallback to local quote loading
        loadMotivationQuote();
        showSuccessMessage('New quote loaded! ðŸ“–');
    }
}

function toggleMilestoneView() {
    const table = document.getElementById('milestones-table');
    const toggleText = document.getElementById('viewToggleText');
    
    if (table.classList.contains('card-view')) {
        // Switch to table view
        table.classList.remove('card-view');
        toggleText.textContent = 'Card View';
    } else {
        // Switch to card view
        table.classList.add('card-view');
        toggleText.textContent = 'Table View';
    }
}

// ======================== KEYBOARD SHORTCUTS ========================
document.addEventListener('keydown', function(e) {
    // Ctrl/Cmd + Shift + T for tutorial
    if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'T') {
        e.preventDefault();
        startTutorial();
    }
    
    // Escape to close tutorial
    if (e.key === 'Escape' && tutorialActive) {
        skipTutorial();
    }
    
    // Ctrl/Cmd + Shift + M for motivation
    if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'M') {
        e.preventDefault();
        requestMotivation();
    }
});

// Function to update milestone progress
async function updateMilestoneProgress(milestoneId, progress) {
    try {
        // Get the milestone row
        const row = document.querySelector(`tr[data-milestone-id="${milestoneId}"]`);
        if (!row) return;
        
        // Get the progress elements
        const progressBar = row.querySelector('.progress-bar');
        const progressText = row.querySelector('small.text-muted');
        const statusBadge = row.querySelector('.badge');
        
        // Update UI immediately for better UX
        progressBar.style.width = `${progress}%`;
        progressText.textContent = `${progress}% Complete`;
        
        // Determine new status based on progress
        let newStatus = 'pending';
        if (progress >= 100) {
            newStatus = 'completed';
        } else if (progress > 0) {
            newStatus = 'in-progress';
        }
        
        // Update status badge class and text
        statusBadge.className = `badge ${
            newStatus === 'completed' ? 'bg-success' :
            newStatus === 'in-progress' ? 'bg-primary' :
            'bg-secondary'
        }`;
        statusBadge.textContent = newStatus.split('-').map(word => 
            word.charAt(0).toUpperCase() + word.slice(1)
        ).join(' ');
        
        // Update progress bar class
        progressBar.className = `progress-bar ${
            newStatus === 'completed' ? 'bg-success' :
            newStatus === 'in-progress' ? 'bg-primary' :
            'bg-secondary'
        }`;
        
        // Send update to server
        const response = await fetch(`/goals/milestone/${milestoneId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                progress_percentage: parseInt(progress),
                status: newStatus
            })
        });
        
        if (!response.ok) {
            throw new Error('Failed to update milestone progress');
        }
        
        // If progress is 100%, disable the slider
        const slider = row.querySelector('.milestone-progress');
        if (progress >= 100) {
            slider.disabled = true;
        }
        
        // Update the edit button data attributes
        const editBtn = row.querySelector('.edit-milestone-btn');
        editBtn.dataset.milestoneStatus = newStatus;
        editBtn.dataset.milestoneProgress = progress;
        
        // Show success toast
        showToast('Success', 'Milestone progress updated successfully', 'success');
        
        // Update overall goal progress
        updateGoalProgress();
        
    } catch (error) {
        console.error('Error updating milestone progress:', error);
        showToast('Error', 'Failed to update milestone progress', 'error');
        
        // Revert UI changes on error
        location.reload();
    }
}

// Function to update overall goal progress
function updateGoalProgress() {
    const milestones = document.querySelectorAll('.milestone-row');
    let totalProgress = 0;
    let completedCount = 0;
    
    milestones.forEach(milestone => {
        const progress = parseInt(milestone.querySelector('.milestone-progress').value);
        totalProgress += progress;
        if (progress >= 100) completedCount++;
    });
    
    const averageProgress = Math.round(totalProgress / milestones.length);
    
    // Update circular progress
    const circularProgress = document.querySelector('.circular-progress');
    const progressPercentage = document.querySelector('.progress-percentage');
    if (circularProgress && progressPercentage) {
        circularProgress.dataset.progress = averageProgress;
        progressPercentage.textContent = `${averageProgress}%`;
    }
    
    // Update quick stats
    const completedCountElement = document.querySelector('.stat-value');
    if (completedCountElement) {
        completedCountElement.textContent = completedCount;
    }
    
    // Update progress bar in statistics card
    const statsProgressBar = document.querySelector('.progress-card .progress-bar');
    const statsProgressText = document.querySelector('.progress-card .progress-stat span');
    if (statsProgressBar && statsProgressText) {
        statsProgressBar.style.width = `${averageProgress}%`;
        statsProgressText.textContent = `${averageProgress}% Complete`;
    }
}

// Function to show toast notifications
function showToast(title, message, type = 'info') {
    // Check if we have a toast container, if not create one
    let toastContainer = document.querySelector('.toast-container');
    if (!toastContainer) {
        toastContainer = document.createElement('div');
        toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
        document.body.appendChild(toastContainer);
    }
    
    // Create toast element
    const toastHtml = `
        <div class="toast" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header bg-${type === 'error' ? 'danger' : 'success'} text-white">
                <strong class="me-auto">${title}</strong>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                ${message}
            </div>
        </div>
    `;
    
    // Add toast to container
    toastContainer.insertAdjacentHTML('beforeend', toastHtml);
    
    // Initialize and show the toast
    const toastElement = toastContainer.lastElementChild;
    const toast = new bootstrap.Toast(toastElement, { autohide: true, delay: 3000 });
    toast.show();
    
    // Remove toast after it's hidden
    toastElement.addEventListener('hidden.bs.toast', () => {
        toastElement.remove();
    });
}
</script>

<style>
/* Timeline styling */
.timeline {
    position: relative;
    padding-left: 25px;
    list-style: none;
}

.timeline-item {
    position: relative;
    padding-bottom: 1.5rem;
}

.timeline-item:not(:last-child):before {
    content: '';
    position: absolute;
    top: 0;
    left: -25px;
    height: 100%;
    border-left: 1px dashed rgba(33, 40, 50, 0.2);
}

.timeline-item-marker {
    position: absolute;
    left: -25px;
    top: 0;
    margin-top: 0.5rem;
}

.timeline-item-marker-indicator {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 30px;
    width: 30px;
    background-color: var(--primary-color);
    border-radius: 100%;
    color: white;
}

.timeline-item-content {
    padding-top: 0;
    padding-bottom: 1.5rem;
    padding-left: 0.75rem;
}

/* Note card styling */
.note-card {
    transition: all 0.2s ease;
    box-shadow: 0 0.15rem 0.5rem rgba(0, 0, 0, 0.05);
}

.note-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.1);
}

/* Metrics styling */
.metrics-list {
    list-style: none;
    padding-left: 0;
    margin-bottom: 0;
}

.metric-item {
    margin-bottom: 4px;
    font-size: 0.875rem;
    display: block;
    width: 100%;
    text-align: left;
    white-space: normal;
    word-break: normal;
    line-height: 1.4;
}

/* Milestone drag and drop styling */
.drag-handle {
    transition: all 0.2s ease;
}

.drag-handle:hover {
    transform: scale(1.1);
    color: #007bff !important;
}

.sortable-ghost {
    opacity: 0.5;
    background-color: #f8f9fa;
}

.sortable-chosen {
    background-color: #e3f2fd;
}

.sortable-drag {
    transform: rotate(5deg);
    box-shadow: 0 5px 15px rgba(0,0,0,0.3);
}

.milestone-row {
    transition: all 0.2s ease;
}

.milestone-row:hover {
    background-color: #f8f9fa;
}

.milestone-row.sortable-chosen .drag-handle {
    cursor: grabbing;
}

#milestones-table tbody tr {
    cursor: default;
}

/* ======================== ENHANCED STYLING ======================== */

/* Tutorial System */
.tutorial-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    z-index: 10000;
    display: flex;
    align-items: center;
    justify-content: center;
}

.tutorial-content {
    background: white;
    border-radius: 15px;
    padding: 30px;
    max-width: 500px;
    width: 90%;
    max-height: 80vh;
    overflow-y: auto;
    box-shadow: 0 20px 40px rgba(0,0,0,0.3);
    animation: tutorialSlideIn 0.3s ease-out;
}

@keyframes tutorialSlideIn {
    from {
        opacity: 0;
        transform: translateY(-50px) scale(0.9);
    }
    to {
        opacity: 1;
        transform: translateY(0) scale(1);
    }
}

.tutorial-header {
    display: flex;
    justify-content: between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 2px solid #e9ecef;
}

.tutorial-header h4 {
    margin: 0;
    color: #495057;
    font-weight: 600;
}

.tutorial-close {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: #6c757d;
    transition: color 0.2s;
}

.tutorial-close:hover {
    color: #dc3545;
}

.tutorial-body {
    margin-bottom: 25px;
}

.tutorial-body p {
    color: #6c757d;
    line-height: 1.6;
    margin-bottom: 15px;
}

.tutorial-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.tutorial-navigation {
    display: flex;
    align-items: center;
    gap: 15px;
}

.tutorial-step-indicator {
    background: #f8f9fa;
    padding: 5px 12px;
    border-radius: 20px;
    font-size: 0.875rem;
    color: #6c757d;
    font-weight: 500;
}

.tutorial-highlight {
    position: relative;
    z-index: 1001;
    box-shadow: 0 0 0 4px rgba(0, 123, 255, 0.3), 0 0 20px rgba(0, 123, 255, 0.2) !important;
    border-radius: 8px !important;
    animation: tutorialHighlight 2s ease-in-out infinite;
}

@keyframes tutorialHighlight {
    0%, 100% { box-shadow: 0 0 0 4px rgba(0, 123, 255, 0.3), 0 0 20px rgba(0, 123, 255, 0.2); }
    50% { box-shadow: 0 0 0 8px rgba(0, 123, 255, 0.5), 0 0 30px rgba(0, 123, 255, 0.4); }
}

/* Enhanced Header */
.goal-header-card {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border: none;
    color: white;
}

.goal-header-card .card-body {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 15px;
    margin: 15px;
}

.goal-icon-container {
    position: relative;
}

.goal-icon {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 24px;
    color: white;
    box-shadow: 0 4px 15px rgba(0,0,0,0.2);
    transition: transform 0.3s ease;
}

.goal-icon:hover {
    transform: scale(1.1) rotate(5deg);
}

.goal-title {
    font-weight: 700;
    background: linear-gradient(45deg, #667eea, #764ba2);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

.quick-stats-row {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 20px;
}

.stat-item {
    text-align: center;
    padding: 15px;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    border-radius: 12px;
    transition: transform 0.3s ease;
}

.stat-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 25px rgba(0,0,0,0.1);
}

.stat-value {
    font-size: 1.5rem;
    font-weight: 700;
    color: #495057;
    margin-bottom: 5px;
}

.stat-label {
    font-size: 0.875rem;
    color: #6c757d;
}

/* AI Insights Styling */
.insight-card {
    background: linear-gradient(135deg, #e3f2fd 0%, #f3e5f5 100%);
    border-radius: 12px;
    padding: 15px;
    border-left: 4px solid #2196f3;
}

.insight-text {
    font-size: 1rem;
    color: #1565c0;
    font-weight: 500;
    margin: 0;
}

.recommendation-card {
    background: linear-gradient(135deg, #fff3e0 0%, #fce4ec 100%);
    border-radius: 12px;
    padding: 15px;
    border-left: 4px solid #ff9800;
}

.recommendation-text {
    font-size: 0.95rem;
    color: #e65100;
    margin: 0;
}

/* Circular Progress */
.circular-progress-container {
    position: relative;
    width: 120px;
    height: 120px;
    margin: 0 auto;
}

.circular-progress {
    position: relative;
    width: 100%;
    height: 100%;
}

.progress-circle {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
    z-index: 2;
}

.progress-percentage {
    display: block;
    font-size: 1.5rem;
    font-weight: 700;
    color: #28a745;
}

.progress-label {
    display: block;
    font-size: 0.875rem;
    color: #6c757d;
    margin-top: 5px;
}

/* Timeline Milestones */
.milestone-timeline {
    margin-bottom: 20px;
}

.timeline-container {
    display: flex;
    gap: 10px;
    overflow-x: auto;
    padding: 10px 0;
}

.timeline-milestone {
    min-width: 80px;
    text-align: center;
    position: relative;
}

.milestone-dot {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 8px;
    font-size: 14px;
    transition: all 0.3s ease;
}

.timeline-milestone.pending .milestone-dot {
    background: #6c757d;
    color: white;
}

.timeline-milestone.in-progress .milestone-dot {
    background: #007bff;
    color: white;
    animation: pulse 2s infinite;
}

.timeline-milestone.completed .milestone-dot {
    background: #28a745;
    color: white;
    box-shadow: 0 0 0 3px rgba(40, 167, 69, 0.3);
}

.timeline-milestone.missed .milestone-dot {
    background: #dc3545;
    color: white;
}

@keyframes pulse {
    0% { box-shadow: 0 0 0 0 rgba(0, 123, 255, 0.7); }
    70% { box-shadow: 0 0 0 10px rgba(0, 123, 255, 0); }
    100% { box-shadow: 0 0 0 0 rgba(0, 123, 255, 0); }
}

.milestone-label {
    font-size: 0.75rem;
    color: #6c757d;
    line-height: 1.2;
}

/* Achievement Badges */
.achievement-section {
    margin-top: 30px;
}

.achievement-badges {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
}

.achievement-badge {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    border: 2px solid #dee2e6;
    border-radius: 12px;
    padding: 12px 16px;
    text-align: center;
    min-width: 100px;
    transition: all 0.3s ease;
    opacity: 0.5;
}

.achievement-badge.earned {
    background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
    border-color: #f39c12;
    opacity: 1;
    transform: scale(1);
}

.achievement-badge.earned.gold {
    background: linear-gradient(135deg, #ffd700 0%, #ffed4e 100%);
    border-color: #f39c12;
    box-shadow: 0 4px 15px rgba(243, 156, 18, 0.3);
}

@keyframes achievementPop {
    0% { transform: scale(0.8); }
    50% { transform: scale(1.1); }
    100% { transform: scale(1); }
}

.achievement-badge i {
    display: block;
    font-size: 1.5rem;
    margin-bottom: 8px;
    color: #f39c12;
}

.achievement-badge span {
    font-size: 0.75rem;
    font-weight: 600;
    color: #495057;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

/* Info Cards */
.info-card {
    background: white;
    border-radius: 12px;
    padding: 20px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    transition: transform 0.3s ease;
    border: 1px solid #e9ecef;
}

.info-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.1);
}

.info-header {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
    padding-bottom: 10px;
    border-bottom: 1px solid #e9ecef;
}

.info-header i {
    font-size: 1.2rem;
    margin-right: 10px;
}

.info-header h6 {
    margin: 0;
    font-weight: 600;
    color: #495057;
}

.timeline-stat, .progress-stat {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
    padding: 8px 0;
}

.timeline-stat label {
    font-weight: 500;
    color: #6c757d;
    margin: 0;
}

.timeline-stat.overdue span {
    color: #dc3545;
    font-weight: 600;
}

.timeline-stat.urgent span {
    color: #fd7e14;
    font-weight: 600;
}

/* Action Grid */
.action-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 15px;
}

.action-btn {
    background: white;
    border: 2px solid #e9ecef;
    border-radius: 12px;
    padding: 20px 15px;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
    text-decoration: none;
    color: inherit;
}

.action-btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    text-decoration: none;
    color: inherit;
}

.action-btn.primary:hover {
    border-color: #007bff;
    background: #007bff;
    color: white;
}

.action-btn.secondary:hover {
    border-color: #6c757d;
    background: #6c757d;
    color: white;
}

.action-btn.success:hover {
    border-color: #28a745;
    background: #28a745;
    color: white;
}

.action-btn.warning:hover {
    border-color: #ffc107;
    background: #ffc107;
    color: white;
}

.action-btn.info:hover {
    border-color: #17a2b8;
    background: #17a2b8;
    color: white;
}

.action-btn.danger:hover {
    border-color: #dc3545;
    background: #dc3545;
    color: white;
}

.action-icon {
    font-size: 1.5rem;
    margin-bottom: 10px;
    color: #6c757d;
    transition: color 0.3s ease;
}

.action-text {
    display: flex;
    flex-direction: column;
    gap: 5px;
}

.action-title {
    font-weight: 600;
    color: #495057;
    font-size: 0.9rem;
}

.action-subtitle {
    font-size: 0.75rem;
    color: #6c757d;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

/* Motivation Card */
.motivation-card {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-radius: 15px;
    position: relative;
    overflow: hidden;
}

.motivation-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="50" cy="50" r="1" fill="white" opacity="0.1"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
    opacity: 0.3;
}

.motivation-card .card-body {
    position: relative;
    z-index: 1;
}

.motivation-icon i {
    font-size: 2rem;
    opacity: 0.8;
}

.motivation-quote {
    font-style: italic;
    font-size: 1rem;
    line-height: 1.5;
    margin-bottom: 10px;
}

/* Celebration Animation */
.celebration-animation {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10001;
    animation: celebrationFadeIn 0.5s ease-out;
}

@keyframes celebrationFadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

.confetti {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 3rem;
    animation: confettiFall 3s ease-out infinite;
}

@keyframes confettiFall {
    0% {
        transform: translate(-50%, -50%) translateY(-100px) rotate(0deg);
        opacity: 1;
    }
    100% {
        transform: translate(-50%, -50%) translateY(100px) rotate(360deg);
        opacity: 0;
    }
}

.celebration-message {
    text-align: center;
    color: white;
    z-index: 2;
    position: relative;
    animation: celebrationBounce 0.8s ease-out;
}

@keyframes celebrationBounce {
    0%, 20%, 53%, 80%, 100% {
        transform: translate3d(0,0,0);
    }
    40%, 43% {
        transform: translate3d(0, -30px, 0);
    }
    70% {
        transform: translate3d(0, -15px, 0);
    }
    90% {
        transform: translate3d(0, -4px, 0);
    }
}

.celebration-message h3 {
    font-size: 2.5rem;
    margin-bottom: 10px;
    background: linear-gradient(45deg, #fff, #f8f9fa);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

/* Motivational Alert */
.motivational-alert {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border: none;
    color: white;
    animation: motivationalSlideIn 0.5s ease-out;
}

@keyframes motivationalSlideIn {
    from {
        opacity: 0;
        transform: translate(-50%, -50%) scale(0.8);
    }
    to {
        opacity: 1;
        transform: translate(-50%, -50%) scale(1);
    }
}

/* Responsive Design */
@media (max-width: 768px) {
    .quick-stats-row {
        grid-template-columns: repeat(2, 1fr);
    }
    
    .action-grid {
        grid-template-columns: repeat(2, 1fr);
    }
    
    .achievement-badges {
        justify-content: center;
    }
    
    .timeline-container {
        justify-content: flex-start;
    }
    
    .tutorial-content {
        margin: 20px;
        padding: 20px;
    }
}

@media (max-width: 576px) {
    .quick-stats-row {
        grid-template-columns: 1fr;
    }
    
    .action-grid {
        grid-template-columns: 1fr;
    }
    
    .goal-icon {
        width: 50px;
        height: 50px;
        font-size: 20px;
    }
    
    .stat-value {
        font-size: 1.25rem;
    }
}

/* Enhanced Tooltips */
.tooltip {
    font-size: 0.875rem;
}

.tooltip-inner {
    background: #495057;
    border-radius: 8px;
    padding: 8px 12px;
}

/* Card View for Milestones */
#milestones-table.card-view {
    display: none;
}

.milestone-cards {
    display: none;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
}

#milestones-table.card-view + .milestone-cards {
    display: grid;
}

.milestone-card {
    background: white;
    border: 1px solid #e9ecef;
    border-radius: 12px;
    padding: 20px;
    transition: all 0.3s ease;
}

.milestone-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.1);
}

.milestone-card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}

.milestone-card-title {
    font-weight: 600;
    color: #495057;
    margin: 0;
}

.milestone-card-body {
    color: #6c757d;
    font-size: 0.9rem;
    line-height: 1.5;
}

.milestone-status {
    margin-bottom: 0.5rem;
}

.form-range:disabled {
    opacity: 0.7;
    cursor: not-allowed;
}

.toast-container {
    z-index: 1050;
}

.circular-progress[data-progress] {
    background: conic-gradient(
        var(--bs-primary) calc(var(--progress) * 1%),
        var(--bs-gray-200) 0
    );
    --progress: attr(data-progress);
}
</style> 

<!-- Initialize tutorial for goal detail page -->
<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Initialize tutorial when page loads
        checkAutoStartTutorial();
        
        // Add click handler for tutorial button
        const tutorialBtn = document.querySelector('button[onclick="startTutorial()"]');
        if (tutorialBtn) {
            tutorialBtn.onclick = (e) => {
                e.preventDefault();
                startTutorial('goal-detail');
            };
        }
    });
</script>
</body>
</html> 