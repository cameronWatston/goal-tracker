<!-- Messages Page -->
<div class="messages-page">
    <div class="container-fluid">
        <!-- Messages Header -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="messages-header">
                    <div class="header-content">
                        <h1><i class="fas fa-envelope me-3"></i>Messages</h1>
                        <p class="lead">Stay connected with your friends and support network!</p>
                    </div>
                    <div class="header-actions">
                        <a href="/friends" class="btn btn-primary">
                            <i class="fas fa-user-friends me-2"></i>Friends
                        </a>
                        <button class="btn btn-success" onclick="refreshMessages()">
                            <i class="fas fa-sync me-2"></i>Refresh
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Messages Interface -->
        <div class="row">
            <div class="col-12">
                <div class="card messages-card">
                    <div class="card-body p-0">
                        <div class="row g-0" style="height: 600px;">
                            <!-- Conversations List -->
                            <div class="col-md-4 border-end">
                                <div class="conversations-header p-3 border-bottom">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h6 class="mb-0">Conversations</h6>
                                        <span class="badge bg-primary" id="totalConversations">0</span>
                                    </div>
                                </div>
                                <div class="conversations-list" id="conversationsList">
                                    <div class="loading-conversations text-center p-4">
                                        <div class="spinner-border text-primary" role="status">
                                            <span class="visually-hidden">Loading conversations...</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Chat Area -->
                            <div class="col-md-8">
                                <div id="chatArea" class="h-100 d-flex flex-column">
                                    <!-- Chat Header -->
                                    <div class="chat-header p-3 border-bottom" id="chatHeader" style="display: none;">
                                        <div class="d-flex align-items-center">
                                            <div class="chat-avatar me-3">
                                                <span id="chatUserInitial">?</span>
                                            </div>
                                                                        <div class="chat-user-info">
                                <h6 class="mb-0" id="chatUserName">Select a conversation</h6>
                                <small class="text-muted" id="chatUserStatus">Click to chat</small>
                            </div>
                                            <div class="ms-auto">
                                                <button class="btn btn-sm btn-outline-secondary" onclick="clearChat()">
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Messages Container -->
                                    <div class="messages-container flex-grow-1 p-3" id="messagesContainer">
                                        <div class="chat-placeholder d-flex align-items-center justify-content-center h-100">
                                            <div class="text-center text-muted">
                                                <i class="fas fa-comments fa-3x mb-3"></i>
                                                <h5>Select a conversation</h5>
                                                <p>Choose a friend to start messaging</p>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Message Input -->
                                    <div class="message-input-area p-3 border-top" id="messageInputArea" style="display: none;">
                                        <form id="messageForm" class="d-flex gap-2">
                                            <input type="text" class="form-control" id="messageInput" placeholder="Type your message..." autocomplete="off">
                                            <button type="submit" class="btn btn-primary">
                                                <i class="fas fa-paper-plane"></i>
                                            </button>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Quick Stats -->
        <div class="row mt-4">
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <i class="fas fa-comments fa-2x text-primary mb-2"></i>
                        <h5 class="mb-0" id="totalMessagesCount">0</h5>
                        <small class="text-muted">Total Messages</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <i class="fas fa-envelope fa-2x text-success mb-2"></i>
                        <h5 class="mb-0" id="unreadMessagesCount">0</h5>
                        <small class="text-muted">Unread Messages</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <i class="fas fa-user-friends fa-2x text-info mb-2"></i>
                        <h5 class="mb-0" id="activeFriendsCount">0</h5>
                        <small class="text-muted">Active Friends</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <i class="fas fa-clock fa-2x text-warning mb-2"></i>
                        <h5 class="mb-0" id="responseTimeAvg">--</h5>
                        <small class="text-muted">Avg Response</small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
let currentConversationId = null;
let currentUserId = null;
let messagePollingInterval = null;

document.addEventListener('DOMContentLoaded', function() {
    // Initialize messages page
    initializeMessagesPage();
    
    // Load initial data
    loadConversations();
    
    // Set up event listeners
    setupEventListeners();
    
    // Check for specific user in URL params
    checkUrlParams();
});

function initializeMessagesPage() {
    console.log('ðŸ’¬ Initializing messages page...');
    
    // Set up real-time message polling
    messagePollingInterval = setInterval(() => {
        if (currentConversationId) {
            loadMessages(currentConversationId, false); // Don't scroll to bottom on auto-refresh
        }
        updateMessageStats();
    }, 5000); // Poll every 5 seconds
}

function setupEventListeners() {
    // Message form submission
    document.getElementById('messageForm').addEventListener('submit', function(e) {
        e.preventDefault();
        sendMessage();
    });
    
    // Enter key to send message
    document.getElementById('messageInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });
}

function checkUrlParams() {
    const urlParams = new URLSearchParams(window.location.search);
    const userId = urlParams.get('user');
    
    if (userId) {
        // Start conversation with specific user
        setTimeout(() => {
            startConversationWithUser(parseInt(userId));
        }, 1000);
    }
}

// ======================== CONVERSATIONS ========================

async function loadConversations() {
    try {
        const response = await fetch('/api/social/conversations');
        const data = await response.json();
        
        if (data.conversations) {
            displayConversations(data.conversations);
            updateConversationStats(data.conversations);
        }
    } catch (error) {
        console.error('Error loading conversations:', error);
        showError('Failed to load conversations');
    }
}

function displayConversations(conversations) {
    const container = document.getElementById('conversationsList');
    
    if (conversations.length === 0) {
        container.innerHTML = `
            <div class="text-center p-4 text-muted">
                <i class="fas fa-comments fa-2x mb-2"></i>
                <p>No conversations yet</p>
                <a href="/friends" class="btn btn-primary btn-sm">
                    <i class="fas fa-user-friends me-1"></i>Find Friends
                </a>
            </div>
        `;
        return;
    }
    
    container.innerHTML = conversations.map(conv => {
        // Use email if username is not available or looks truncated
        const displayName = conv.other_username && conv.other_username.length > 3 ? 
            conv.other_username : 
            (conv.other_email ? conv.other_email.split('@')[0] : 'User');
            
        return `
            <div class="conversation-item ${conv.unread_count > 0 ? 'unread' : ''}" onclick="openConversation(${conv.other_user_id}, '${displayName}')">
                <div class="conversation-avatar">
                    ${displayName.charAt(0).toUpperCase()}
                </div>
                <div class="conversation-info">
                    <div class="conversation-name">${displayName}</div>
                    <div class="conversation-preview">${conv.last_message || 'No messages yet'}</div>
                    <div class="conversation-time">${formatTime(conv.last_message_time)}</div>
                </div>
                ${conv.unread_count > 0 ? `<div class="unread-badge">${conv.unread_count}</div>` : ''}
            </div>
        `;
    }).join('');
}

function updateConversationStats(conversations) {
    document.getElementById('totalConversations').textContent = conversations.length;
    
    const unreadCount = conversations.reduce((sum, conv) => sum + (conv.unread_count || 0), 0);
    document.getElementById('unreadMessagesCount').textContent = unreadCount;
    
    const activeFriends = conversations.filter(conv => conv.last_message_time).length;
    document.getElementById('activeFriendsCount').textContent = activeFriends;
}

// ======================== MESSAGES ========================

async function openConversation(userId, username) {
    currentConversationId = userId;
    currentUserId = userId;
    
    // Update chat header
    document.getElementById('chatUserInitial').textContent = username.charAt(0).toUpperCase();
    document.getElementById('chatUserName').textContent = username;
    document.getElementById('chatHeader').style.display = 'block';
    document.getElementById('messageInputArea').style.display = 'block';
    
    // Load messages
    await loadMessages(userId);
    
    // Mark conversation as active
    markConversationActive(userId);
}

async function loadMessages(userId, scrollToBottom = true) {
    try {
        const response = await fetch(`/api/social/messages/${userId}`);
        const data = await response.json();
        
        if (data.messages) {
            displayMessages(data.messages, scrollToBottom);
        }
    } catch (error) {
        console.error('Error loading messages:', error);
        showError('Failed to load messages');
    }
}

function displayMessages(messages, scrollToBottom = true) {
    const container = document.getElementById('messagesContainer');
    
    if (messages.length === 0) {
        container.innerHTML = `
            <div class="text-center text-muted p-4">
                <i class="fas fa-comment-dots fa-2x mb-2"></i>
                <p>No messages yet. Start the conversation!</p>
            </div>
        `;
        return;
    }
    
    container.innerHTML = messages.map(message => `
        <div class="message ${message.is_sender ? 'message-sent' : 'message-received'}">
            <div class="message-content">
                ${message.message}
            </div>
            <div class="message-time">
                ${formatTime(message.created_at)}
            </div>
        </div>
    `).join('');
    
    if (scrollToBottom) {
        // Force scroll to bottom with a small delay
        setTimeout(() => {
            container.scrollTop = container.scrollHeight;
        }, 100);
    }
}

async function sendMessage() {
    const messageInput = document.getElementById('messageInput');
    const content = messageInput.value.trim();
    
    if (!content || !currentUserId) {
        return;
    }
    
    try {
        const response = await fetch('/api/social/message', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                receiverId: currentUserId,
                message: content
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            messageInput.value = '';
            // Reload messages to show the new message
            await loadMessages(currentUserId);
            // Refresh conversations list
            loadConversations();
        } else {
            showError(data.error || 'Failed to send message');
        }
    } catch (error) {
        console.error('Error sending message:', error);
        showError('Failed to send message');
    }
}

// ======================== UTILITY FUNCTIONS ========================

function markConversationActive(userId) {
    // Remove active class from all conversations
    document.querySelectorAll('.conversation-item').forEach(item => {
        item.classList.remove('active');
    });
    
    // Add active class to current conversation
    const activeConv = document.querySelector(`[onclick*="${userId}"]`);
    if (activeConv) {
        activeConv.classList.add('active');
    }
}

function clearChat() {
    currentConversationId = null;
    currentUserId = null;
    
    document.getElementById('chatHeader').style.display = 'none';
    document.getElementById('messageInputArea').style.display = 'none';
    
    document.getElementById('messagesContainer').innerHTML = `
        <div class="chat-placeholder d-flex align-items-center justify-content-center h-100">
            <div class="text-center text-muted">
                <i class="fas fa-comments fa-3x mb-3"></i>
                <h5>Select a conversation</h5>
                <p>Choose a friend to start messaging</p>
            </div>
        </div>
    `;
    
    // Remove active class from all conversations
    document.querySelectorAll('.conversation-item').forEach(item => {
        item.classList.remove('active');
    });
}

async function startConversationWithUser(userId) {
    try {
        // First, get user info
        const response = await fetch(`/api/social/user/${userId}`);
        const data = await response.json();
        
        if (data.user) {
            openConversation(userId, data.user.username);
        }
    } catch (error) {
        console.error('Error starting conversation:', error);
        showError('Failed to start conversation');
    }
}

function refreshMessages() {
    loadConversations();
    if (currentConversationId) {
        loadMessages(currentConversationId);
    }
    updateMessageStats();
    showToast('Success', 'Messages refreshed!', 'success');
}

async function updateMessageStats() {
    try {
        const response = await fetch('/api/social/message-stats');
        const data = await response.json();
        
        if (data.stats) {
            document.getElementById('totalMessagesCount').textContent = data.stats.total || 0;
            document.getElementById('responseTimeAvg').textContent = data.stats.avgResponse || '--';
        }
    } catch (error) {
        console.error('Error updating message stats:', error);
    }
}

function formatTime(timestamp) {
    if (!timestamp) return '';
    
    const date = new Date(timestamp);
    const now = new Date();
    
    // Check if date is valid
    if (isNaN(date.getTime())) {
        console.warn('Invalid timestamp:', timestamp);
        return 'Invalid date';
    }
    
    const diff = now.getTime() - date.getTime();
    
    // Debug log for troubleshooting
    console.log('Timestamp:', timestamp, 'Parsed date:', date.toISOString(), 'Now:', now.toISOString(), 'Diff (ms):', diff, 'Diff (min):', Math.floor(diff / 60000));
    
    // Less than 30 seconds
    if (diff < 30000) return 'Just now';
    
    // Less than 1 minute
    if (diff < 60000) return `${Math.floor(diff / 1000)}s ago`;
    
    // Less than 1 hour
    if (diff < 3600000) {
        const minutes = Math.floor(diff / 60000);
        return `${minutes}m ago`;
    }
    
    // Less than 24 hours
    if (diff < 86400000) {
        const hours = Math.floor(diff / 3600000);
        return `${hours}h ago`;
    }
    
    // Less than 7 days
    if (diff < 604800000) {
        const days = Math.floor(diff / 86400000);
        return `${days}d ago`;
    }
    
    // More than 7 days - show actual date
    return date.toLocaleDateString('en-US', {
        month: 'short',
        day: 'numeric',
        year: date.getFullYear() !== now.getFullYear() ? 'numeric' : undefined
    });
}

function showToast(title, message, type = 'info') {
    // Create toast notification
    const toast = document.createElement('div');
    toast.className = `toast align-items-center text-white bg-${type === 'error' ? 'danger' : type} border-0`;
    toast.setAttribute('role', 'alert');
    toast.innerHTML = `
        <div class="d-flex">
            <div class="toast-body">
                <strong>${title}:</strong> ${message}
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
    `;
    
    // Add to page
    let toastContainer = document.querySelector('.toast-container');
    if (!toastContainer) {
        toastContainer = document.createElement('div');
        toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
        document.body.appendChild(toastContainer);
    }
    
    toastContainer.appendChild(toast);
    
    // Show toast
    const bsToast = new bootstrap.Toast(toast);
    bsToast.show();
    
    // Remove after hiding
    toast.addEventListener('hidden.bs.toast', () => {
        toast.remove();
    });
}

function showError(message) {
    showToast('Error', message, 'error');
}

// Cleanup on page unload
window.addEventListener('beforeunload', function() {
    if (messagePollingInterval) {
        clearInterval(messagePollingInterval);
    }
});
</script>

<style>
/* Messages Page Styles */
.messages-page {
    background: #f8f9fa;
    min-height: 100vh;
    padding: 2rem 0;
}

.messages-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 20px;
    padding: 3rem 2rem;
    color: white;
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
}

.header-content h1 {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
}

.header-actions {
    display: flex;
    gap: 1rem;
}

/* Messages Card */
.messages-card {
    border: none;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    border-radius: 15px;
    overflow: hidden;
}

/* Conversations List */
.conversations-list {
    height: 540px;
    overflow-y: auto;
}

.conversation-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    border-bottom: 1px solid #f8f9fa;
    cursor: pointer;
    transition: all 0.2s ease;
    position: relative;
}

.conversation-item:hover {
    background-color: #f8f9fa;
}

.conversation-item.active {
    background-color: rgba(102, 126, 234, 0.1);
    border-left: 3px solid #667eea;
}

.conversation-item.unread {
    background-color: rgba(102, 126, 234, 0.05);
    font-weight: 600;
}

.conversation-avatar {
    width: 45px;
    height: 45px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
    font-size: 1.1rem;
    flex-shrink: 0;
}

.conversation-info {
    flex: 1;
    min-width: 0;
}

.conversation-name {
    font-weight: 600;
    font-size: 0.9rem;
    margin-bottom: 0.25rem;
}

.conversation-preview {
    font-size: 0.8rem;
    color: #6c757d;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 150px;
}

.conversation-time {
    font-size: 0.7rem;
    color: #9ca3af;
    margin-top: 0.25rem;
}

.unread-badge {
    background: #667eea;
    color: white;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.7rem;
    font-weight: 600;
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
}

/* Chat Area */
.chat-header {
    background: #f8f9fa;
}

.chat-avatar {
    width: 40px;
    height: 40px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
}

.messages-container {
    overflow-y: auto;
    background: #fafafa;
    padding: 1rem;
    height: 400px;
    max-height: 400px;
}

.message {
    margin-bottom: 1rem;
    display: flex;
    flex-direction: column;
}

.message-sent {
    align-items: flex-end;
}

.message-received {
    align-items: flex-start;
}

.message-content {
    max-width: 70%;
    padding: 0.75rem 1rem;
    border-radius: 18px;
    word-wrap: break-word;
}

.message-sent .message-content {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-bottom-right-radius: 4px;
}

.message-received .message-content {
    background: white;
    color: #333;
    border: 1px solid #e9ecef;
    border-bottom-left-radius: 4px;
}

.message-time {
    font-size: 0.7rem;
    color: #6c757d;
    margin-top: 0.25rem;
    padding: 0 0.5rem;
}

/* Message Input */
.message-input-area {
    background: white;
}

#messageInput {
    border-radius: 25px;
    padding: 0.75rem 1rem;
}

#messageInput:focus {
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.25);
}

/* Stats Cards */
.card {
    border: none;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    border-radius: 10px;
    transition: transform 0.2s ease;
}

.card:hover {
    transform: translateY(-2px);
}

/* Responsive Design */
@media (max-width: 768px) {
    .messages-header {
        flex-direction: column;
        text-align: center;
        gap: 1.5rem;
    }
    
    .header-actions {
        flex-direction: column;
        width: 100%;
    }
    
    .row.g-0 {
        height: 500px !important;
    }
    
    .col-md-4 {
        border-bottom: 1px solid #dee2e6;
        border-right: none !important;
    }
    
    .conversations-list {
        height: 200px;
    }
    
    .message-content {
        max-width: 85%;
    }
}

/* Loading States */
.loading-conversations {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 200px;
}

/* Scrollbar Styling */
.conversations-list::-webkit-scrollbar,
.messages-container::-webkit-scrollbar {
    width: 6px;
}

.conversations-list::-webkit-scrollbar-track,
.messages-container::-webkit-scrollbar-track {
    background: #f1f1f1;
}

.conversations-list::-webkit-scrollbar-thumb,
.messages-container::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 3px;
}

.conversations-list::-webkit-scrollbar-thumb:hover,
.messages-container::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
}
</style> 